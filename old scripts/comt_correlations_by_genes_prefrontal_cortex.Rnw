\documentclass[11pt]{article}
\usepackage{graphicx, subfig}
\usepackage{float}
\pagenumbering{arabic}
\usepackage{enumerate}
\usepackage{Sweave}
\usepackage{booktabs}
\usepackage[table]{xcolor}
\usepackage{framed}
\usepackage{longtable}
\usepackage{tablefootnote}


\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{keep.source=TRUE} 


\hspace{-1.5em}Gene Network\\
COMT expression correlations Prefrontal cortext\\
Fall, 2017\\

<<echo=FALSE>>=
library(ggplot2,ggthemes)
library(ggExtra)
library(psych)
library(ggpubr)       ### Make sure this is installed
library(knitr)
library(Hmisc)
library(openxlsx)
library(xtable)
library(magrittr)
library(tables)
library(stargazer)
library(plyr)
library(rlist)
library(qqman)
library(manhattanly)
library(Cairo)
library(RColorBrewer)
library(HGNChelper)
library(tools)
library(scales)
library(devtools)
install_github("drveera/ggman")
library(ggman)
library(dplyr)
library(biomaRt)

source("https://bioconductor.org/biocLite.R")
# biocLite(c("GenomicFeatures", "AnnotationDbi"))
# biocLite("org.Hs.eg.db")
library("AnnotationHub")
#library("GenomicFeatures")
library("org.Hs.eg.db")

source("https://bioconductor.org/workflows.R")
# workflowInstall("annotation")


options(scipen = 3, digits = 5, width = 60)
@

<<echo=FALSE, results=hide >>=
### to prepend filename strings to plots
pre.Name <- c('comt_expression_frontal_cortex-') #pre-ppended to eps output files
# RColorBrewer palette
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
source('histChrfunc.R')
source('onlycisChr.R')
@

<<label=genecoexpressURLs, echo=FALSE, include=FALSE, results=tex>>=
coexpress.URL <- data.frame(site=NA,addr=NA)
coexpress.URL[1,1:2] <- c('COXPRESdb','http://coxpresdb.jp/')
coexpress.URL[2,1:2] <- c('OMICtools','https://omictools.com/')
coexpress.URL[3,1:2] <- c('Coexpedia','http://www.coexpedia.org/search.php')
coexpress.URL[4,1:2] <- c('GeneFriends','http://www.genefriends.org/RNAseq/')

url.Tab <- xtable(coexpress.URL)
url.Table <- latex(url.Tab,file='',
                   caption = c("Gene Co-expression Databases"),
                   caption.loc = c('top'),
                     colname = c('Name','URL'),
                     rowlabel = c(''),
                     colnamesTexCmd="bfseries",
                     booktabs=TRUE,
                     label=c('tab:coexpressurls'),
                     na.blank = TRUE,
                     vbar = FALSE,
                     longtable=TRUE,
                     table.env=TRUE,
                     center=c('center'),
                     continued=c('Gene Co-expression Databases Continued'),
                     first.hline.double = TRUE,
                     append=FALSE
                     )
print(url.Table)


@





<<echo=FALSE>>=
### read the data file 
wb <- loadWorkbook('correlation_results_COMT_Prefrontal_cortex20000.xlsx')           # give the workbook a name in R like 'wb' or whatever you want
comt.Data <- data.frame(read.xlsx(wb,         # now tell R to read that workbook and which sheet
                                  sheet = "correlations"))
chrom.Data <- data.frame(read.xlsx(wb,         # now tell R to read that workbook and which sheet
                                  sheet = "chrom_length"))


### Note to convert r correlations into p values use these transformations
### store the results in a colun in the original data frame - without the print statements
# example: r = 0.809, n = 138
# r.test(n = , r12 = )
# out.t <- r.test(n = 138, r12 = 0.809)
# print(out.t$t,digits=10)
# [1] 16.05025766
# pval <- 2*pt(-abs(t),df=n-2)
# pval <- 2*pt(-abs(print(out.t$t,digits=20)),df=136)
# print(pval,digits=10)

@

<<label=getChr,echo=FALSE>>=
### Strip all characters after : in Location
comt.Data$loc <- sub("\\::*\\s[0-9]*\\.[0-9]*","",comt.Data$Location)
substring(comt.Data$loc,1,3) <- "   "
comt.Data$loc <- ordered(comt.Data$loc)
### Get start locations from comt.Data$Location
comt.Data$bp <- as.numeric(sub('.*\\:', '', comt.Data$Location))

########### Check for step that loses data when selecting specific chromosomes ##############
# comt.Data$loc contains the chromosome number as a factor stripped from location
# comt.Data$bp is the base pair location of the probe/gene within the chromosome
# head(comt.Data$loc)
# head(comt.Data$bp)

whichChr <- c(22)


### Check and correct/update where possible gene symbols
### Need to remove '-' because R interprets it as math mode and halts when it doesn't find $
out.Symb <- checkGeneSymbols(comt.Data$Symbol, unmapped.as.na=FALSE, hgnc.table=NULL)
comt.Data$Symbol <-  out.Symb$Suggested.Symbol
comt.Data$Symbol[which(comt.Data$Symbol == '-')] <- c(".")

#### Clean illegal characters from the gene names: -
#grep('.*\\-',comt.Data$Symbol)
comt.Data$Symbol <- gsub("-", ".", comt.Data$Symbol)

@

<<label=commaSep, echo=FALSE>>=
### Function to take a vector of numbers, and turn it into a comma-separated string.

comma.Sep <- function(in.vec) {
  out.Sep <- c('')
    out.Sep <- c(paste(out.Sep,as.character(in.vec[1]),sep=''))
  
  if (length(in.vec) > 1) {
    
    for (q in 2:length(in.vec)) {
      out.Sep <- c(paste(out.Sep,', ',as.character(in.vec[q])))
    }

  } else {
    
  }
        
    return(out.Sep)
}

@



<<label=square_axes, echo=FALSE, results=hide>>=
### Function to plot on equal-SD scaled square axes.
######################### Begin square.Axes function ###################################
square.Axes <- function(xvar,yvar,title.Text,xlabel.Text,ylabel.Text,corval) {
  
  dat <- data.frame(x = c(xvar), y = c(yvar))
  
  range.Lims.x <- c(mean(xvar) - 4*sd(xvar), mean(xvar) + 4*sd(xvar))
  range.Lims.y <- c(mean(yvar) - 4*sd(yvar), mean(yvar) + 4*sd(yvar))
  
  
  
  sq.Plt <-   ggplot(dat, aes(x=xvar,y=yvar)) +
    geom_point(color = "blue",size=1.0) + 
    geom_smooth(method=lm,   # Add linear regression line
                se=FALSE,
                color="yellow",
                size = 1)  +  # Don't add shaded confidence region
    #            theme(aspect.ratio=1) +
    # This adds  the little lines to each axis that represent the densities of the variables
    geom_rug() +    
    geom_abline(intercept = mean(yvar)  + (-sign(corval))*(mean(xvar)/sd(xvar))*sd(yvar),
                slope = sign(corval)*(sd(yvar)/sd(xvar)),
                linetype='dashed',
                size = 1) + 
    scale_y_continuous(name=ylabel.Text,
                       limits=range.Lims.y) +
    scale_x_continuous(name=xlabel.Text,
                       limits=range.Lims.x) +
    ggtitle(title.Text) + 
#    theme_minimal() + 
    theme_classic() + 
    theme(aspect.ratio=1) +
    theme(axis.line = element_line(colour = "grey80",size=1.0),
          panel.border = element_rect(colour = "grey80", fill=NA,
                                      size=2.5)) +
    theme(plot.title = element_text(color="black",
                                    face="bold",
                                    size=18,
                                    hjust=0.5)) +
    theme(axis.title = element_text(color="black",
                                    size=15)) +
    theme(axis.text.x = element_text(size=14),
          axis.text.y = element_text(size=14)) +
    geom_vline(xintercept = mean(xvar),
               col='red',
               size = 1) +
    geom_hline(yintercept = mean(yvar),
               col='red',
               size = 1) +
    annotate("text", x = mean(xvar)+3*sd(xvar),
             y = mean(yvar)+3.8*sd(yvar),
             label = c(paste('r = ',toString(corval),sep='')),
             color="black",
             size=5)
  
  return(sq.Plt) # This is what gets returned by the function. In this case it is an actual plot.
}                # <<<< This is actually the last stement in the function.
######
@


%%%%%%%%%%%%%%% Statistics

<<label=descStat, echo=FALSE, results=tex>>=
comt.Meanposr <- data.frame(mean=NA,corr=NA,chr=NA,gene=NA,bp=NA,pval=NA)
comt.Meannegr <- data.frame(mean=NA,corr=NA,chr=NA,gene=NA,bp=NA,pval=NA)
comt.Meanbothr <- data.frame(mean=comt.Data$Mean,corr=comt.Data$Sample.r,chr=comt.Data$loc,
                             gene=comt.Data$Symbol,bp=comt.Data$bp,pval=comt.Data$Sample.p.r.)
comt.Meanbothr$corsign <- as.factor(sign(comt.Data$Sample.r))
comt.Meanbothr$chr[which(comt.Meanbothr$chr == '   Un')] <- c(NA)
### Get rid of "Un/NA" chromosome rows
comt.Meanbothr2 <- data.frame(na.omit(comt.Meanbothr))
rm(comt.Meanbothr)
comt.Meanbothr <- comt.Meanbothr2   # <--- This holds pos and neg corr data

# Table of frequencies of pos and neg correlated genes per chromosome
df2 <- data.frame(table(comt.Meanbothr$chr,comt.Meanbothr$corsign))
df2 <- data.frame(df2,chr=c(1,10,11,12,13,14,15,16,17,18,19,2,20,21,22,3,4,5,6,7,8,9,25,23,24))
colnames(df2) <- c('origchr','corsign','freq','chr')
df2$chr <- as.numeric(df2$chr)
dfsort <-df2[order(df2$corsign,df2$chr), ]


### Need to eliminate the 'Un' Chr column
dfsort <- dfsort[,2:4]
dfsort <- cbind(dfsort[1:25,],dfsort[26:50,])
dfsort <- dfsort[1:24,]
dfsort <- rbind(dfsort[,1:3],dfsort[,4:6])

posrmeans <- comt.Meanbothr$mean[which(comt.Meanbothr$corr > 0)]
negrmeans <- comt.Meanbothr$mean[which(comt.Meanbothr$corr < 0)]
posrcorrs <- comt.Meanbothr$corr[which(comt.Meanbothr$corr > 0)]
negrcorrs <- comt.Meanbothr$corr[which(comt.Meanbothr$corr < 0)]
posrchr <- as.factor(comt.Meanbothr$chr[which(comt.Meanbothr$corr > 0)])
negrchr <- as.factor(comt.Meanbothr$chr[which(comt.Meanbothr$corr < 0)])
posgene <- comt.Meanbothr$gene[which(comt.Meanbothr$corr > 0)]
neggene <- comt.Meanbothr$gene[which(comt.Meanbothr$corr < 0)]
posbp <- comt.Meanbothr$bp[which(comt.Meanbothr$corr > 0)]
negbp <- comt.Meanbothr$bp[which(comt.Meanbothr$corr < 0)]
pospval <- comt.Meanbothr$pval[which(comt.Meanbothr$corr > 0)]
negpval <- comt.Meanbothr$pval[which(comt.Meanbothr$corr < 0)]


comt.Meanposr <- data.frame(mean=posrmeans,corr=posrcorrs,chr=posrchr,gene=posgene,
                            bp=posbp,pval=pospval)
comt.Meannegr <- data.frame(mean=negrmeans,corr=negrcorrs,chr=negrchr,gene=neggene,
                            bp=negbp,pval=negpval)
comt.Meanposr$chr <- as.character(comt.Meanposr$chr)
comt.Meannegr$chr <- as.character(comt.Meannegr$chr)


#### Replace Chr 'X' with 23
comt.Meanposr$chr[which(comt.Meanposr$chr == '   X')] <- as.character(c('   23'))
comt.Meannegr$chr[which(comt.Meannegr$chr == '   X')] <- as.character(c('   23'))

#### Replace Chr 'Y' with 24
comt.Meanposr$chr[which(comt.Meanposr$chr == '   Y')] <- as.character(c('   24'))
comt.Meannegr$chr[which(comt.Meannegr$chr == '   Y')] <- as.character(c('   24'))

### Positive r only
manhat.Posr <- data.frame(CHR=as.integer(comt.Meanposr$chr), 
                          BP=comt.Meanposr$bp,P=comt.Meanposr$pval,
                          GENE=comt.Meanposr$gene,
                          CORR=comt.Meanposr$corr,
                          MEAN=comt.Meanposr$mean
                          )
manhat.Posr$CHR <- as.integer(as.character(manhat.Posr$CHR))
manhat.Posr$GENE <- as.character(manhat.Posr$GENE)
# Save data including COMT for later analysis
manhat.Posr.withCOMT <- manhat.Posr
#### Exclude COMT because p = 0.000
manhat.Posr <- manhat.Posr[2:dim(manhat.Posr)[1],]


### Negative r only
manhat.Negr <- data.frame(CHR=as.integer(comt.Meannegr$chr), 
                          BP=comt.Meannegr$bp,P=comt.Meannegr$pval,
                          GENE=comt.Meannegr$gene,
                          CORR=comt.Meannegr$corr,
                          MEAN=comt.Meannegr$mean
                          )
manhat.Negr$CHR <- as.integer(as.character(manhat.Negr$CHR))
manhat.Negr$GENE <- as.character(manhat.Negr$GENE)

@

<<label=top10percent, echo=FALSE, results=tex>>=
################################################
### Select the top 10% by p-value to determine which genes expression levels (by chromosome) are most highly correlated with COMT expression.
### Done separately for positive and negative correlations
### Inversely normalized by fitted number of probes from the regression on chr length, but weighted by proportion of each chromosome in the top 10%. 
################################################

##### Positive correlations with COMT expression only #####################
full.Count <- table(manhat.Posr$CHR)
order.by.P.pos <- manhat.Posr[order(manhat.Posr$P), ]
xtable(order.by.P.pos[1:10,],caption=c('Ten Genes with Highest Positive Correlations with COMT in Prefrontal Cortex'))

############ End positive only ########################
  
##### Negative correlations with COMT expression only #####################
full.Count <- table(manhat.Negr$CHR)
order.by.P.neg <- manhat.Negr[order(manhat.Negr$P), ]
xtable(order.by.P.neg[1:10,],caption=c('Ten Genes with Highest Negative Correlations with COMT in Prefrontal Cortex'))

############ End negative only ########################

@

<<label=getGenenames, echo=FALSE, include=FALSE, results=tex>>=
ensembl <- useMart("ensembl", dataset = "hsapiens_gene_ensembl")
normal.chroms <- c(1:22, "X", "Y", "M")


ah <- AnnotationHub()

orgs <- query(ah, "org.Hs.eg.db")
gene.DB <- orgs[["AH57973"]]
#columns(gene.DB)
#keytypes(gene.DB)

top10.Pos <- select(gene.DB,keys=order.by.P.pos$GENE[1:10],columns=c('GENENAME','SYMBOL','ENTREZID'                    ),keytype=c('SYMBOL'))

pos10.Tab <- xtable(top10.Pos,caption=c('Top 10 Positively Correlated Genes with COMT in Prefrontal Cortex'))

pos10.Tab

top10.Neg <- select(gene.DB,keys=order.by.P.neg$GENE[1:10],columns=c('GENENAME','SYMBOL','ENTREZID'                    ),keytype=c('SYMBOL'))
neg10.Tab <- xtable(top10.Neg,caption=c('Top 10 Negatively Correlated Genes with COMT in Prefrontal Cortex'))

neg10.Tab
@


<<label=coexpress1, echo=FALSE, include=FALSE, results=tex>>=
print(xtable(coexpress.URL[1,],caption=c('The next co-expression analysis used the database at this URL to find genes coexpressed with COMT that matched those in the top 10 positively correlated genes with COMT in prefrontal cortex.')))
### read the COMT coexpression data file 
hold.Matchpos <- matrix(c(rep(NA,30)),nrow=3)
hold.Matchneg <- matrix(c(rep(NA,30)),nrow=3)
hold.Chrompos <- matrix(c(rep(NA,30)),nrow=3)
hold.Chromneg <- matrix(c(rep(NA,30)),nrow=3)

wbhsa <- loadWorkbook('comt_coex_list_500_hsa.xlsx')
wbhsa2 <- loadWorkbook('comt_coex_list_500_hsa2.xlsx')
wbhsa3 <- loadWorkbook('comt_coex_list_500_hsa3.xlsx')

coex.data.File <- list(wbhsa,wbhsa2,wbhsa3)



for (idb in 1:3) {
hsa.DB <- coex.data.File[[idb]]
coexpress.Data <- data.frame(read.xlsx(hsa.DB,         # now tell R to read that workbook and which sheet
                                  sheet = "coex500"))


coexpress.Data$Entrez.Gene.ID <- as.character(coexpress.Data$Entrez.Gene.ID)

for (ma in 1:10) {

  if (isTRUE(which(coexpress.Data$Entrez.Gene.ID == top10.Pos$ENTREZID[ma]) != 0)) {
    hold.Matchpos[idb,ma] <- coexpress.Data$Gene[which(coexpress.Data$Entrez.Gene.ID == top10.Pos$ENTREZID[ma])]
  } else {
    
  }
  
  if (isTRUE(which(coexpress.Data$Entrez.Gene.ID == top10.Neg$ENTREZID[ma]) != 0)) {
    hold.Matchneg[idb,ma] <- coexpress.Data$Gene[which(coexpress.Data$Entrez.Gene.ID == top10.Neg$ENTREZID[ma])]
  } else {
    
  } 
}

# Combine the three vectors that hold the matches for each polarity
pos.Matches <- unique(c(hold.Matchpos[1,which(!is.na(hold.Matchpos[1,]))],hold.Matchpos[2,which(!is.na(hold.Matchpos[2,]))],hold.Matchpos[3,which(!is.na(hold.Matchpos[3,]))]))

neg.Matches <- unique(c(hold.Matchneg[1,which(!is.na(hold.Matchneg[1,]))],hold.Matchneg[2,which(!is.na(hold.Matchneg[2,]))],hold.Matchneg[3,which(!is.na(hold.Matchneg[3,]))]))

} #end idb hsa loop

if (length(pos.Matches) > 0) {
my.symbols <- pos.Matches
my.regions <- getBM(c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "band"),
                    filters = c("hgnc_symbol", "chromosome_name"),
                    values = list(hgnc_symbol=my.symbols, chromosome_name=normal.chroms),
                    mart = ensembl)
my.regions$chromosome_name

posmatch.DF <- data.frame(geneSymbol=pos.Matches,chromosome=my.regions$chromosome_name)


} else {posmatch.DF <- data.frame(geneSymbol=NA,chromosome=NA)
}

xtable(posmatch.DF,caption=c('Genes matching the top 10 positively correlated genes - COMT in Prefrontal'))


if (length(neg.Matches) > 0) {
my.symbols <- neg.Matches
my.regions <- getBM(c("hgnc_symbol", "chromosome_name", "start_position", "end_position", "band"),
                    filters = c("hgnc_symbol", "chromosome_name"),
                    values = list(hgnc_symbol=my.symbols, chromosome_name=normal.chroms),
                    mart = ensembl)
my.regions$chromosome_name

negmatch.DF <- data.frame(geneSymbol=neg.Matches,chromosome=my.regions$chromosome_name)


} else {negmatch.DF <- data.frame(geneSymbol=NA,chromosome=NA)
}

xtable(negmatch.DF,caption=c('Genes matching the top 10 negatively correlated genes - COMT in Prefrontal'))

@

% Genes from \Sexpr{print(coexpress.URL[1,])} that overlap with the 10 most highly positively correlated genes with COMT in Prefrontal Cortex:\\
% \Sexpr{pos.Matches[1:length(pos.Matches)]}\\
% 
% (Note: this database most likely only shows positively correlated coexpression genes.)\\
% Genes from \Sexpr{print(coexpress.URL[1,])} that overlap with the 10 most highly negatively correlated genes with COMT in Prefrontal Cortex:\\
% \Sexpr{neg.Matches[1:length(neg.Matches)]}\\


\end{document}


 
