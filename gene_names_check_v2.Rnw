\documentclass[11pt]{article}
\usepackage{graphicx, subfig}
\usepackage{float}
\pagenumbering{arabic}
\usepackage{enumerate}
\usepackage{Sweave}
\usepackage{booktabs}
\usepackage[table]{xcolor}
\usepackage{framed}
\usepackage{longtable}
\usepackage{tablefootnote}
\usepackage{amsmath}
\usepackage{hyperref}



\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{keep.source=TRUE} 

\hspace{-1.5em}Gene Network\\
COMT expression correlations in Four Bartin Areas\\
Fall, 2017\\



<<echo=FALSE>>=
library(knitr)
library(openxlsx)
library(xtable)
#library(magrittr)
library(tables)
library(plyr)
library(scales)
library(utils)
# library(ggman)
library(dplyr)
library(biomaRt)
library(stringr)
library(curl)
library(git2r)
library(githubinstall)

setwd('/Volumes/Macintosh_HD_3/genetics/genenetwork2/')

source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/squareAxes.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork/histChrfunc.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork/onlycisChr.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork/hypergeom_plot.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/countNA.R') # function num.NA()
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_get_match_length.R') #len.match()
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func.chrom.names.R') # extract Chr names
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_get_start_pos.R') # extract and scale start positions
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/commaSep.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_myBioCLite.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/nums2genes.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_genes_are_nums.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_genes_are_locs.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_genes2chr.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_anyY.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_gene_start_end.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/raincloudPlots.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_chisq_genesBychr.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_mismatch_hgnc.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_get_miss_Stats.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_strip_chr.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_strip_bp.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_miss_chr_bp.R')
source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_miss_symb_descr.R')


stand.Col.names <- c('Prefrontal',
                     'Cerebellum',
                     'Temporal',
                     'Pons')

@

<<init, include=FALSE >>=
opts_chunk$set(include=FALSE,
               echo=FALSE,
               message=FALSE,
               warning=FALSE)
@



<<include=FALSE, echo=FALSE, results=hide>>=
# Generate a unique ID for this program by path and filename. This unique ID is attached to this file using a tag in the filesystem.
source('unique_id_generator.R')

fname <- c("/Volumes/Macintosh_HD_3/genetics/genenetwork2/gene_names_check_v2.Rnw")

prog.Name <- unique.ID(fname)

prog.Name

sUs <- c(TRUE)  # Applies to biocLite installations sUs = suppress Update status
sAUs <- c(TRUE)  # Applies to biocLite installations sAUs = suppress Auto Update status
@

This program has the unique ID: \Sexpr{prog.Name}.

<<>>=
#myBioCLite() # This function updates only the packages that need to be updated


#biocLite('enrichR')
library('enrichR')
dbs.Enrichr <- listEnrichrDbs()

source("https://bioconductor.org/biocLite.R")

#   biocLite(c("GenomicFeatures"),suppressUpdates=sUs, suppressAutoUpdate=sAUs)   
#   biocLite(c("AnnotationDbi"),suppressUpdates=sUs, suppressAutoUpdate=sAUs)   
#   biocLite(c("org.Hs.eg.db"),suppressUpdates=sUs, suppressAutoUpdate=sAUs)   


library("AnnotationHub")
library("GenomicFeatures")
library("org.Hs.eg.db")


#      biocLite(c('hgu95av2.db'),suppressUpdates=sUs, suppressAutoUpdate=sAUs)


library('hgu95av2.db')


#      biocLite("illuminaHumanv4.db",suppressUpdates=sUs, suppressAutoUpdate=sAUs)


#library("illuminaHumanv4.db")

source("https://bioconductor.org/workflows.R")


#  workflowInstall("annotation")   

#  biocLite("TxDb.Hsapiens.UCSC.hg19.knownGene",suppressUpdates=sUs, suppressAutoUpdate=sAUs)

library(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene #shorthand (for convenience)   


#      biocLite('EDASeq',suppressUpdates=sUs, suppressAutoUpdate=sAUs)

library('EDASeq')


#      biocLite('lumi',suppressUpdates=sUs, suppressAutoUpdate=sAUs)


library(lumi)

#      biocLite('lumiHumanIDMapping',suppressUpdates=sUs, suppressAutoUpdate=sAUs)

library(lumiHumanIDMapping)
# 

# #      biocLite('lumiHumanAll.db',suppressUpdates=sUs, suppressAutoUpdate=sAUs)

library('lumiHumanAll.db')

#      biocLite('rBLAST',suppressUpdates=sUs, suppressAutoUpdate=sAUs)

# library(rBLAST)


#      biocLite (c( "beadarray" , "limma" , "illuminaHumanv2.db"),
#                suppressUpdates=sUs, suppressAutoUpdate=sAUs)
library(limma)
library("illuminaHumanv2.db")

# 

#      biocLite('annotate',suppressUpdates=sUs, suppressAutoUpdate=sAUs)

library('annotate')

library("beadarray","limma")

entrez_object <- org.Hs.egGO    

ensembl <- useMart("ENSEMBL_MART_ENSEMBL", dataset = "hsapiens_gene_ensembl")
#ensembl = useEnsembl(biomart="ensembl",dataset = "hsapiens_gene_ensembl")

normal.chroms <- c(1:22, "X", "Y", "M")

 ah <- AnnotationHub()
 
 orgs <- AnnotationHub::query(ah, "org.Hs.eg.db")

 gene.DB <- orgs[["AH57973"]]


# columns(gene.DB)
# keytypes(gene.DB)
 
 ## Bimap interface:
x <- org.Hs.egCHR
# Get the entrez gene identifiers that are mapped to a chromosome
mapped_genes <- mappedkeys(x)
# Convert to a list
xx <- as.list(x[mapped_genes])

chrom.Names <- c(as.character(seq(1,22,1)),'X','Y')

# Use the hgu95av2.db and the hgu95av2CHRLENGTHS data to get the chromosome lengths

# yy <- hgu95av2CHRLENGTHS
# chrom.Data <- data.frame(chrom=chrom.Names,
#                          chrom.Length=yy[chrom.Names]
# )


options(scipen = 999, digits = 5, width = 60, knitr.table.format = "latex")

@
<<echo=FALSE,include=FALSE,results=hide>>=
### read the data file 


wball <- loadWorkbook('comt_correlations_20000_all_areas_augmentedNew.xlsx')   

# now tell R to read that workbook and which sheet
  prefront.Data <- data.frame(read.xlsx(wball,sheet = "prefrontal"))
  
  cbell.Data <- data.frame(read.xlsx(wball,sheet = "cerebellum"))

  tempor.Data <- data.frame(read.xlsx(wball,sheet = "temporal"))

  pons.Data <- data.frame(read.xlsx(wball,sheet = "pons"))


# create a list with these data frames to be used when the same operation is applied to all area
  
major.Area <- list(pf=prefront.Data,
                   cb=cbell.Data,
                   tm=tempor.Data,
                   po=pons.Data)
       

i <- c(1:4) # index for the four brain areas, i is reserved

# Get corrected start positions for all genes

# pf.starts <- getBM(attributes = c("illumina_humanref_8_v3", "hgnc_symbol",
#                                          "chromosome_name", "start_position","end_position",
#                                          "entrezgene"), filters = "illumina_humanref_8_v3", 
#                           values = as.character(prefront.Data$Record), mart = ensembl)


# Some of the gene Symbols have a period in them because they originally had '-' but that caused problems. Need to reinsert the '-' symbol, but have to escape it.

# period.Indx.pf <- grep('\\.',prefront.Data$Symbol)
# prefront.Data$Symbol[c(period.Indx.pf)] <- gsub('\\.','\\-',prefront.Data$Symbol[period.Indx.pf])
# 
# period.Indx.cb <- grep('\\.',cbell.Data$Symbol)
# cbell.Data$Symbol[c(period.Indx.cb)] <- gsub('\\.','\\-',cbell.Data$Symbol[period.Indx.cb])
# 
# period.Indx.tm <- grep('\\.',tempor.Data$Symbol)
# tempor.Data$Symbol[c(period.Indx.tm)] <- gsub('\\.','\\-',tempor.Data$Symbol[period.Indx.tm])
# 
# period.Indx.po <- grep('\\.',pons.Data$Symbol)
# pons.Data$Symbol[c(period.Indx.po)] <- gsub('\\.','\\-',pons.Data$Symbol[period.Indx.po])


@

<<>>=
# Missing Chr names/numbers ('loc') and starting positions ('bp')
  
     un.nobp.tab  <- get.miss.Chr.bp(major.Area,i)

@

The table below shows that the current master data file with the four primary data sets contains numerous entries with missing Chromosome names and gene start positions.\\
\Sexpr{un.nobp.tab}

<<missing_genes >>=
# Next determine how many entries are missing gene names
     # Using the original data files, generate a table showing how many gene names are missing in each area
  
     miss.tab <- get.num.miss.symbols(major.Area,i)

@

This table shows that all 20,000 probes in each brain area have gene symbols.\\

\Sexpr{miss.tab}

Unfortunately, not all of the gene symbols are official gene symbols. Some of them are just numbers or symbols like LOCxx.

<<>>=  
# Determine how many genes appear more than once in an area because there were multiple Illumina probes used on the same gene.
  
temp.table <- list()

i <- c(1:4)  

  func.table <- function(x,i) table(x[i]$Symbol,useNA='no')
  func.tabtab <- function(x,i) table(unlist(x))
  func.add.row.names <- function(x,y,i) {row.names(x[i]) <- y[i]}
  
temp.table <- sapply(major.Area,func.table,i=c(1:4))
temp.duplicated.genes <- sapply(temp.table[i],func.tabtab, i)

temp.duplicated.genes <-matrix(unlist(temp.duplicated.genes))
hold.temp <- temp.duplicated.genes[16:31]
temp.duplicated.genes <- matrix(c(temp.duplicated.genes[1:15],0,hold.temp),ncol=4)

temp.duplicated.genes <- data.frame(temp.duplicated.genes)
colnames(temp.duplicated.genes) <- stand.Col.names
row.names(temp.duplicated.genes) <- as.character(c(1:8))



# Prefrontal, Temporal and Pons have a maximum of 8 for the number of times the same gene appears in the original data. Cerebellum has a maximum of 7.

dup.genes.tab <- xtable(temp.duplicated.genes,
                        caption=c('Frequency distribution of the number of probes per gene'))
  
@

The next table shows the distribution of the number of probes per gene; that is, some genes had their expression level measured with only 1 probe, some with 2 probes, etc. to a maximum of 8 probes for the same gene.\\

\Sexpr{dup.genes.tab}

<<>>=
# Read in the illumina_humanref_8_v2 excel file to get the entrez ids and gene symbols for all of the data from the 4 brain areas 

wbillum <- loadWorkbook('illumina_human_ref_8_v2v3.xlsx')   

# now tell R to read that workbook and which sheet
  illumina8v2.Data <- data.frame(read.xlsx(wbillum,sheet = "illumina_v2"))
  

  illum.indx.v2 <- list()
  
  illum.indx.v2 <- lapply(major.Area[i], function(x,i,y)  match(x[i]$Record,y$ilmn),
                          i,illumina8v2.Data)
  
for (j in 1:4) {
  
  major.Area[[j]]$ENTREZID <- illumina8v2.Data$entrez[illum.indx.v2[[j]]]
  
}

  prefront.Data$ENTREZID <- major.Area[[1]]$ENTREZID
  cbell.Data$ENTREZID <- major.Area[[2]]$ENTREZID
  tempor.Data$ENTREZID <- major.Area[[3]]$ENTREZID
  pons.Data$ENTREZID <- major.Area[[4]]$ENTREZID
  
  miss.Tab <- list()
  
  miss.Tab <- sapply(major.Area[i], function(x,i) {get.miss.Stats(x,i)},i)
  
  miss.Tab
  
#              pf cb tm po
#  miss.Symb   0  0  0  0 
#  miss.entrez 7  7  6  7 
 
@ 

<<>>=
# Only 6 or 7 ENTREZIDs are missing in each brain area. Find the missing ones, and use getBM with gene symbols to get the missing ENTREZIDs
  
  miss.entrez.indx <- list()
  find.miss.tmp <- list()
  find.miss.entrez <- list()
  where.miss.Symb <- list()
  unique.miss.Symb <- list()
  
  miss.entrez.indx <- lapply(major.Area[i], function(x,i) which(is.na(x$ENTREZID)),i)
  
  for (ti in 1:4)   {
       
       print(major.Area[[ti]]$Symbol[unlist(miss.entrez.indx[[ti]])])
       print(major.Area[[ti]]$ENTREZID[unlist(miss.entrez.indx[[ti]])])
       
  }
  
  
  
# Cannot use illumina_humanref_8_v3 because the data were collected using the ref8_v2 platform
    # find.miss.entrez <- sapply(major.Area[i], function (x,i,y) {getBM(attributes = c("illumina_humanref_8_v3", "hgnc_symbol","chromosome_name", "start_position","end_position","entrezgene"), filters = 'hgnc_symbol', values = x$Symbol[unlist(y)], mart = ensembl)}, i, miss.entrez.indx[i]) 
  
    find.miss.tmp <- lapply(major.Area[i], function (x,i,y) {biomaRt::select(gene.DB,keys=as.character(x$Symbol[unlist(y[i])]),columns=c('SYMBOL','ENTREZID'),keytype=c('SYMBOL'))}, i, miss.entrez.indx)

    for (ti in 1:4)   {
    
         where.miss.Symb[[ti]] <- match(major.Area[[ti]]$Symbol[unlist(miss.entrez.indx[[ti]])],find.miss.tmp[[ti]][,1])
         
    }
   
# Check results by hand
    hand.entrez <- list(matrix(rep(NA,3*length(miss.entrez.indx[[1]])),ncol=3),
                        matrix(rep(NA,3*length(miss.entrez.indx[[2]])),ncol=3),
                        matrix(rep(NA,3*length(miss.entrez.indx[[3]])),ncol=3),
                        matrix(rep(NA,3*length(miss.entrez.indx[[4]])),ncol=3))

    #pf    
    hand.entrez[[1]][1:length(miss.entrez.indx[[1]]),1] <- c("EEF1A1", "EEF1A1", "GAPDH",  "ACTB",   "TUBB",   "ACTB","TXN")
    hand.entrez[[1]][1:length(miss.entrez.indx[[1]]),2] <- c("1915",   "1915",   "2597",   "60",     "203068", "60", "7295" )
    hand.entrez[[1]][1:length(miss.entrez.indx[[1]]),3] <- c('1915','1915','2597','60','203068','60','7295')
    
    #cb
        hand.entrez[[2]][1:length(miss.entrez.indx[[2]]),1] <- c("GAPDH",  "EEF1A1", "EEF1A1", "TXN",    "ACTB",   "TUBB",   "ACTB")
    hand.entrez[[2]][1:length(miss.entrez.indx[[2]]),2] <- c('2597','1915','1915','7295','60',
                                                             "203068",'60')
    hand.entrez[[2]][1:length(miss.entrez.indx[[2]]),3] <- c("2597",   "1915",   "1915",   "7295",   "60",     "203068", "60")
    
    #tm
        hand.entrez[[3]][1:length(miss.entrez.indx[[3]]),1] <- c("EEF1A1", "EEF1A1", "GAPDH",  "ACTB",   "TXN",    "TUBB")
    hand.entrez[[3]][1:length(miss.entrez.indx[[3]]),2] <- c('1915','1915','2597','60','7295',
                                                             "203068")
    hand.entrez[[3]][1:length(miss.entrez.indx[[3]]),3] <- c("1915",   "1915",   "2597",   "60",     "7295",   "203068")
    
    #po
        hand.entrez[[4]][1:length(miss.entrez.indx[[4]]),1] <- c("EEF1A1", "ACTB",   "EEF1A1", "TUBB",   "GAPDH",  "TXN",    "ACTB")
    hand.entrez[[4]][1:length(miss.entrez.indx[[4]]),2] <- c('1915','60','1915',"203068",'2597',
                                                             '7295','60')
    hand.entrez[[4]][1:length(miss.entrez.indx[[4]]),3] <- c("1915",   "60",     "1915",   "203068", "2597",   "7295",   "60")
    
# All of the ENTREZID were checked by hand and are correct.    
    
    for (l in 1:4)   {

      major.Area[[l]]$ENTREZID[unlist(miss.entrez.indx[[l]])] <- find.miss.tmp[[l]][,2][unlist(where.miss.Symb[[l]])]

    }
   
  prefront.Data$ENTREZID <- unlist(major.Area[[1]]$ENTREZID)
  cbell.Data$ENTREZID <- unlist(major.Area[[2]]$ENTREZID)
  tempor.Data$ENTREZID <-unlist(major.Area[[3]]$ENTREZID)
  pons.Data$ENTREZID <- unlist(major.Area[[4]]$ENTREZID)
  
  # Need to reconstitute major.Area with the full and corrected data
  
  major.Area <- list(pf=prefront.Data,
                   cb=cbell.Data,
                   tm=tempor.Data,
                   po=pons.Data)
  
  miss.Tab <- list()
  
  miss.Tab <- sapply(major.Area[i], function(x,i) {get.miss.Stats(x,i)},i)
  
  miss.Tab
  
#             pf cb tm po
# miss.Symb   0  0  0  0 
# miss.entrez 0  0  0  0 
  
  
  # Randomly sample 5 rows in each brain area, and check the ENTREZIDs by hand using Gene Cards
  
#   hold.rand.rows <- matrix(rep(NA,100),ncol=5)
#   hold.rand.rows <- data.frame(hold.rand.rows)
#   colnames(hold.rand.rows) <- c('Brain Area', 'Row','Gene','fileENTREZID','genecardsENTREZID')
#   hold.rand.rows[,1] <- c('Prefrontal',rep('',4),
#                           'Cerebellum',rep('',4),
#                           'Temporal',rep('',4),
#                           'Pons',rep('',4))
#   hold.rand.rows[,2] <- c(as.integer(sample(1:20000,5,replace=FALSE)),
#                           as.integer(sample(1:20000,5,replace=FALSE)),
#                           as.integer(sample(1:20000,5,replace=FALSE)),
#                           as.integer(sample(1:20000,5,replace=FALSE)))
#   hold.rand.rows[,3] <-c(prefront.Data$Symbol[c(hold.rand.rows[1:5,2])],
#                          cbell.Data$Symbol[c(hold.rand.rows[6:10,2])],
#                          tempor.Data$Symbol[c(hold.rand.rows[11:15,2])],
#                          pons.Data$Symbol[c(hold.rand.rows[16:20,2])])
#   hold.rand.rows[,4] <-c(prefront.Data$ENTREZID[c(hold.rand.rows[1:5,2])],
#                          cbell.Data$ENTREZID[c(hold.rand.rows[6:10,2])],
#                          tempor.Data$ENTREZID[c(hold.rand.rows[11:15,2])],
#                          pons.Data$ENTREZID[c(hold.rand.rows[16:20,2])])
# 
# 
# #  # All but MGC17330 were found by handf on Gene Cards and entered below. An internet lookup was used to try to find MGC17330.
# #   
# #   missing.Gene <- alias2SymbolTable('MGC17330', species = "Hs")   # Returns NA
# # 
# #   # Use gene symbol for lookup  
# #   missing.Gene <- getBM(attributes = c("illumina_humanref_8_v3", "hgnc_symbol","chromosome_name", "start_position","end_position","entrezgene"), filters = 'hgnc_symbol', values = 'MGC17330', mart = ensembl)     # Also returns NA
# #   
# #   # Use entrezgene for lookup
# #   # This returns PIK3IP1 as the gene symbol for this gene. It must be an alias.
# #   missing.Gene <- getBM(attributes = c("illumina_humanref_8_v3", "hgnc_symbol","chromosome_name", "start_position","end_position","entrezgene"), filters = 'entrezgene', values = '113791', mart = ensembl)     
# #   
# # # This is the correct entrezgene ID for PIK3IP1:  113791
# #   
# #   # Corrected in the primary data excel data file on March 23, 2018
# #   # Corrected in illumina_human_ref_8_v2v3.xlsx March 23, 2018
# #   # Corrected at this point in the program in cbell.Data$Symbol March 23, 2018
# #   
# #   cbell.Data$Symbol[19679] <- c('PIK3IP1')
# #   
#   hold.rand.rows[,5] <- as.character(c(3765,
#                                        83746,
#                                        5265,
#                                        7073,
#                                        11235,
#                                        54821,     # FLJ20105 -> ERCC6L
#                                        11107,
#                                        27004,
#                                        729396,
#                                        10942,
#                                        54112,
#                                        3785,
#                                        441522,           # FLJ31132 -> obsolete (removed at NCBI)
#                                        8773,
#                                        153571,
#                                        1805,
#                                        283461,
#                                        80099,      # FLJ21075 -> C7orf69
#                                        54777,      # C10ORF92 -> CFAP46
#                                        158787
#   ))
# 
# ####################
# #  alias2SymbolTable('FLJ20105',species='Hs')   <- produces NA
#   # Found as alias for ERCC6L on ensembl web site
# 
#  alias2SymbolTable('FLJ20105',species='Hs')
#  
#   
#   # Need to replace FLJ20105 with ERCC6L in all primary data sets and in major.Area
#   miss.Alias <- lapply(major.Area[i], function(x,i) grep('FLJ20105',x$Symbol),i)
#   
#   for (mi in 1:4)  {
#        
#        major.Area[[mi]]$Symbol[unlist(miss.Alias[[mi]])] <- c('ERCC6L')
#   }
# ################## 
# #  FLJ31132 is considered obsolete
#   
#   alias2SymbolTable('FLJ31132',species='Hs')     # produces NA
#   
#   missing.Gene <- biomaRt::select(gene.DB,keys='FLJ31132',columns=c('GENENAME','SYMBOL','ENTREZID'),keytype=c('SYMBOL'))    # Produces NA
#   
#   missing.Gene <- biomaRt::select(gene.DB,keys='441522',columns=c('GENENAME','SYMBOL','ENTREZID'),keytype=c('ENTREZID'))   # Produces NA
#   
#   which(illumina8v2.Data$symbol == 'FLJ31132')
# ##################
#   
#   alias2SymbolTable('FLJ21075',species='Hs')    # NA
#   
#   # Found on Gene Cards as C7orf69
# ##################  
#   
# # Compare the two sets of ENTREZIDs: fileENTREZID, genecardsENTREZID
#   
#   setdiff(hold.rand.rows[,4],hold.rand.rows[,5])  #= numeric(0)  March 23, 2018
# 
#   setdiff(hold.rand.rows[,4],hold.rand.rows[,5])  #= numeric(0)  April 2, 2018

# March 23, 2018: The ENTREZIDs from  n = 5 randomly sampled of rows from each brain area agree perfectly with the same entrezgene IDs looked up by hand using Gene Cards.
  
  # April 2, 2018: The ENTREZIDs from  n = 5 randomly sampled of rows from each brain area agree perfectly with the same entrezgene IDs looked up by hand using Gene Cards.
  
  
@

<<>>=
# Check for missing rows
  
  miss.Tab <- list()
  
  miss.Tab <- sapply(major.Area[i], function(x,i) {get.miss.Stats(x,i)},i)
  
  miss.Tab

#               pf cb tm po
# miss.Symb   0  0  0  0 
# miss.entrez 0  0  0  0 

  # Missing Chr names/numbers ('loc') and starting positions ('bp')
  
     un.nobp.tab  <- get.miss.Chr.bp(major.Area,i)
@

     The table below shows that the current master data file with the four primary data sets contains numerous entries with missing Chromosome names and gene start positions.\\

     \Sexpr{un.nobp.tab}

     
<<missing_genes >>=
# Next determine how many entries are missing gene names
     # Using the original data files, generate a table showing how many gene names are missing in each area
  
     miss.tab <- get.num.miss.symbols(major.Area,i)

@

This table shows that all 20,000 probes in each brain area have gene symbols.\\

\Sexpr{miss.tab} 

<<>>=
# At this point, there are no missing Gene Symbols and no missing ENTREZIds in any of the brain area data.
  
# Next, need to get the Chromosome names (numbers, letters) & transcription start positions
  
# Before doing this, the gene Symbols that are purely numbers need to be converted to actual gene symbols and those that start with LOC also need to be converted.
  
# There are two functions sourced above for doing this:
  
# func_genes_are_nums.R')
# func_genes_are_locs.R')  
 
 genesrnums <- list() 
  returned.Symbols <- list()
  entrez.indx <- list()
  nums.from.biomart <- list()

 genesrnums <- lapply(major.Area[i], function (x,i) genes.Are.nums(x), i) 
 
# April 2, 2018   genernums returns 0 for the length of each Symbol variable
 # Changes were previously written out to 
 
# Use the ENTREZIDs to get the correct gene Symbols for these genes that are numbers.
 
 for (u in 1:4)   {
 
      ########### DEBUG
#      u <- c(1)
      #################
          if (length(genesrnums) > 0)   {
      # returned.Symbols[[u]] <- getBM(attributes = c("hgnc_symbol","entrezgene"), filters = 'entrezgene', values = major.Area[[u]]$ENTREZID[unlist(genesrnums[[u]])], mart = ensembl)
      
      nums.from.biomart[[u]] <- biomaRt::select(gene.DB,keys=as.character(major.Area[[u]]$ENTREZID[unlist(genesrnums[[u]])]),columns=c('GENENAME','SYMBOL','ENTREZID'),keytype=c('ENTREZID'))
      
      not.Symb.na <- which(!is.na(nums.from.biomart[[u]]$SYMBOL))
      # entrez.indx[[u]] <- match(major.Area[[u]]$ENTREZID[unlist(genesrnums[[u]])],nums.from.biomart[[u]]$ENTREZID)
      
      entrez.indx[[u]] <- match(nums.from.biomart[[u]]$ENTREZID[c(not.Symb.na)],major.Area[[u]]$ENTREZID)
      
      major.Area[[u]]$Symbol[c(entrez.indx[[u]])] <- alias2SymbolTable(nums.from.biomart[[u]]$SYMBOL[c(not.Symb.na)],species='Hs')
      
          } else {}
      
 } # end brain area loop

  miss.Tab <- list()
  
  miss.Tab <- sapply(major.Area[i], function(x,i) {get.miss.Stats(x,i)},i)
  
  miss.Tab 
 
#            pf cb tm po
# miss.Symb   0  0  0  0 
# miss.entrez 0  0  0  0  
 
 
  prefront.Data$Symbol <- unlist(major.Area[[1]]$Symbol)
  cbell.Data$Symbol <- unlist(major.Area[[2]]$Symbol)
  tempor.Data$Symbol <-unlist(major.Area[[3]]$Symbol)
  pons.Data$Symbol <- unlist(major.Area[[4]]$Symbol)
  
  # Need to reconstitute major.Area with the full and corrected data
  
  major.Area <- list(pf=prefront.Data,
                   cb=cbell.Data,
                   tm=tempor.Data,
                   po=pons.Data)
  
  miss.Tab <- list()
  
  miss.Tab <- sapply(major.Area[i], function(x,i) {get.miss.Stats(x,i)},i)
  
  miss.Tab
  
#              pf cb tm po
# miss.Symb   0  0  0  0 
# miss.entrez 0  0  0  0 
 
  @
  
  << noLoc >>=
  
 # Next, do the same thing for genes whose symbols begin with LOC
########### AFTER finished need to write these changes to the individual data files and imprt those into the fulle excell data file making sure that the gene symbol column is formatted as text to prevent excel from converting gene names like MARCH8 into dates.

  genesrlocs <- list() 
  returned.Symbols <- list()
  entrez.indx <- list()
  entrez1.indx <- list()
  entrez2.indx <- list()
  
# generlocs holds the indices in the full major.Area[[1]] of the entries for which the gene symbols are LOCxx
genesrlocs <- sapply(major.Area[i], function (x,i) genes.Are.locs(x,i), i)
 
sapply(genesrlocs[i], function(x,i) length(x), i)

# Numbers of genes in each brain area that begin with LOC
# pf  cb  tm  po 
# 452 461 461 462 
 
 locs.from.biomart <- list()

  
# Use the ENTREZIDs to get the correct gene Symbols for these genes that are numbers.
 
# Note: the numbers in all of the comments below apply only to major.Area[[1]] which is the pf data set
 
 for (u in 1:4)   {
 
      ########## DEBUG 
       u <- c(4)
      ################
      if (length(genesrlocs[[u]]) > 0)  {

# Returns 222 symbols for major.Area[[1]] (Some of them are "".)     
      returned.Symbols[[u]] <- getBM(attributes = c("hgnc_symbol","entrezgene"), filters = 'entrezgene', values = major.Area[[u]]$ENTREZID[unlist(genesrlocs[[u]])], mart = ensembl)
      
# Eight of the symbols are listed as "". These need to be replaced with NA
      which.blank <- which(returned.Symbols[[u]]$hgnc_symbol == "")
      returned.Symbols[[u]]$hgnc_symbol[c(which.blank)] <- NA

# Holds the 222 ENTREZID indices in major.Area of the 222 entrezgene entries queried that yielded either symbols or NA 
# Note, rather than matching returned.Symbols$entrezgene against only the 452 ENTREZIDs corresponding to the entries that have LOCxx as symbols, match against the full major.Area$ENTREZID. In this way, entrez.indx[[u]] directly references the full major.Area data.frame
     entrez.indx[[u]] <- match(returned.Symbols[[u]]$entrezgene,major.Area[[u]]$ENTREZID)

# The indices in entrez1.indx are from matching the entrezgene entries in the returned.Symbol set against only the local 452 ENTREZIDs used to query getBM   
     entrez1.indx[[u]] <- match(returned.Symbols[[u]]$entrezgene,major.Area[[u]]$ENTREZID[unlist(genesrlocs[[u]])])


# There are 3 duplicated indices among the 222 in entrez.indx[[1]]     
#     sum(duplicated(entrez.indx[[1]]))


# Returns entries for all 452 entrezgene queries, but 139 of them are NA, 313 are Symbols
 locs.from.biomart[[u]] <- biomaRt::select(gene.DB,keys=as.character(major.Area[[u]]$ENTREZID[unlist(genesrlocs[[u]])]),columns=c('GENENAME','SYMBOL','ENTREZID'),keytype=c('ENTREZID'))
 
# Holds the 452 indices in major.Area$ENTREZID that correspond to the ENTREZIDs used to query biomart for gene symbols 
     
     entrez2.indx[[u]] <- match(locs.from.biomart[[u]]$ENTREZID,major.Area[[u]]$ENTREZID)
     
     # locs.from.biomart[[u]]$SYMBOL
     

 #     } #end brain area loop


       
      # Note (for pf): the getBM query found 222 symbols that were originally LOCxx; the biomart query found 313.
       
     # Set up the found symbols in a data.frame with the two columns being the symbol results of the two queries.
       
hold.all.query.Symb <- data.frame(gt.BM=rep(NA,length(unlist(genesrlocs[[u]]))),
                                            biom=rep(NA,length(unlist(genesrlocs[[u]])))
)
     
 hold.all.query.Symb[c(entrez1.indx[[u]]),1] <-  alias2SymbolTable(returned.Symbols[[u]]$hgnc_symbol,
                                                                   species='Hs')
 hold.all.query.Symb[,2] <- alias2SymbolTable(locs.from.biomart[[u]]$SYMBOL,species='Hs')
 
 # Now hold.all.query.Symb holds the available symbols from the two queries side-by-side.
 # Note: there are still LOCxx entries because neither query could find all the symbols using entrezgene
 
 # Combine the two columns using the appropriate symbol or NA
 # Rules 
   # NA, NA       -> NA
   # NA, Symb2    -> Symb2
   # Symb1, NA    -> Symb1
   # Symb1, Symb2 -> Symb2
   
 
 comb.query <- union_all(hold.all.query.Symb[,1],hold.all.query.Symb[,2])[(length(hold.all.query.Symb[,1]) + 1):(2*length(hold.all.query.Symb[,1]))]
 
 subst.Symb <- which(!is.na(comb.query))

 # This now substitutes the found gene Symbols for the LOCxx entries in major.Area[[u]]$Symbol 
 
 major.Area[[u]]$Symbol[c(genesrlocs[[u]][c(subst.Symb)])] <- comb.query[subst.Symb]
 
      } else {}
 
      } #end brain area loop

   miss.Tab <- list()
  
  miss.Tab <- sapply(major.Area[i], function(x,i) {get.miss.Stats(x,i)},i)
  
  miss.Tab
  
#            pf cb tm po
# miss.Symb   0  0  0  0 
# miss.entrez 0  0  0  0 
 
genesrlocs <- sapply(major.Area[i], function (x,i) genes.Are.locs(x,i), i)
 
sapply(genesrlocs[i], function(x,i) length(x), i)

# Reduced the LOCxx gene symbols from ~455 to ~167
# pf  cb  tm  po 
# 167 170 166 165
 
 
 # Reconstitute the primary data frames after these LOCxx genes have been converted to actual symbols
  prefront.Data$Symbol <- unlist(major.Area[[1]]$Symbol)
  cbell.Data$Symbol <- unlist(major.Area[[2]]$Symbol)
  tempor.Data$Symbol <-unlist(major.Area[[3]]$Symbol)
  pons.Data$Symbol <- unlist(major.Area[[4]]$Symbol)
  
  # Need to reconstitute major.Area with the full and corrected data
  major.Area <- list(pf=prefront.Data,
                   cb=cbell.Data,
                   tm=tempor.Data,
                   po=pons.Data)
 
@

<< >>=
# Interim: write back out the primary data files after finding symbols for genes as numbers and for genes with LOCxx
# Note: they are written as txt files to prevent Excel from converting gene symbols such as MARCH8 to date format  
  # write to files

# Using the extension, .txt, allows these to be imported into excel so that the column with gene Symbols can be set to text, preventing Excel from converting gene Symbols like MARCH1 to date format.
#    write.csv(as.data.frame(prefront.Data),"/Volumes/Macintosh_HD_3/genetics/genenetwork2/comt_correlations_20000_prefrontal_augmentedNew.csv.txt",row.names=FALSE)
# # # # # #
#    write.csv(as.data.frame(cbell.Data),"/Volumes/Macintosh_HD_3/genetics/genenetwork2/comt_correlations_20000_cerebellum_augmentedNew.csv.txt",row.names=FALSE)
# # # # # #
#    write.csv(as.data.frame(tempor.Data),"/Volumes/Macintosh_HD_3/genetics/genenetwork2/comt_correlations_20000_temporal_augmentedNew.csv.txt",row.names=FALSE)
# # # # # #
#    write.csv(as.data.frame(pons.Data),"/Volumes/Macintosh_HD_3/genetics/genenetwork2/comt_correlations_20000_pons_augmentedNew.csv.txt",row.names=FALSE)

  @

<<>>=
# Use the Location column in the 4 data sets to extract the Chromosome number/name
# The entries in the Location column look like: Chr22: 18.328774
# Split off the Chr22, then split off the 22
  
### Strip all characters after : in Location

loc.temp <- lapply(major.Area[i], function(x,i) strip.Chr(x), i)    


### Get start locations from prefront.Data$Location

  bp.temp <- lapply(major.Area[i], function(x,i) strip.bp(x), i)
  
# add columns to the primary data sets named 'loc' that has the Chromosome name/number and 'bp' that has the starting location of the transcript/probe

 
for (k in 1:4) {
     
     major.Area[[k]]$loc <- as.character(loc.temp[[k]])
     major.Area[[k]]$bp <- bp.temp[[k]]
     
     # Add a column with the sign of the correlation to each areal data.frame
     major.Area[[k]]$corsign <- as.factor(sign(major.Area[[k]]$Sample.r))
}  
  
  
   # Reconstitute the primary data frames after these LOCxx genes have been converted to actual symbols
  prefront.Data <- data.frame(major.Area[[1]])
  cbell.Data <- data.frame(major.Area[[2]])
  tempor.Data <-data.frame(major.Area[[3]])
  pons.Data <- data.frame(major.Area[[4]])
  
  
  @

<<>>=
# There are no NA entries either for 'loc' or 'bp'. However, there are many 'Un' entries for 'loc' and '1.00' entries for 'bp'
  
# First try to use the ENTREZIDs to get both the missing Chr numbers/names and the 'bp' starting positions
  un.Chr <- list()
  miss.bp <- list()
  
  # un.Chr <- lapply(major.Area[i], function(x,i) which(x$loc == 'Un'))
  # miss.bp <- lapply(major.Area[i], function(x,i) which(x$bp == 1.00))
# There are no missing Chr numbers/names
 # There are missing start positions
  
  miss.bp.returned <- list()
  match.bp.indx <- list()
  
  miss.bp.returned <- lapply(major.Area[i], function(x,i,y) {getBM(attributes=c('entrezgene','hgnc_symbol','chromosome_name','start_position'), filters ='entrezgene', values =x$ENTREZID[unlist(y)], mart = ensembl)}, i,miss.bp[i])
  

     
     for (w in 1:4)   {
     
     match.bp.indx[[w]] <- na.omit(match(major.Area[[w]]$ENTREZID[unlist(miss.bp[[w]])],
                                 miss.bp.returned[[w]]$entrezgene))
          
     }
  
  for (w in 1:4)   {
       
     major.Area[[w]]$bp[unlist(miss.bp[[w]])] <- miss.bp.returned[[w]]$start_position[unlist(match.bp.indx[[w]])]/1000000
       
  }
  
  @


\end{document}
