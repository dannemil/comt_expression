\documentclass[11pt]{article}
\usepackage{graphicx, subfig}
\usepackage{float}
\pagenumbering{arabic}
\usepackage{enumerate}
\usepackage{Sweave}
\usepackage{booktabs}
\usepackage[table]{xcolor}
\usepackage{framed}
\usepackage{longtable}
\usepackage{tablefootnote}
\usepackage{amsmath}
\usepackage{hyperref}



\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{keep.source=TRUE} 

\hspace{-1.5em}Gene Network\\
COMT expression correlations in Four Brain Areas\\
Fall, 2017\\



<<echo=FALSE>>=
library(knitr)
library(openxlsx)
library(xtable)
#library(magrittr)
library(tables)
library(plyr)
library(scales)
library(utils)
# library(ggman)
library(dplyr)
library(biomaRt)
library(stringr)
library(curl)
library(git2r)
library(githubinstall)
library(devtools)
library('xml2')
library(RCurl)
library(XML)
library(rentrez)
library(data.table)
library(compare)

stand.Col.names <- c('Prefrontal',
                     'Cerebellum',
                     'Temporal',
                     'Pons')


setwd('/Volumes/Macintosh_HD_3/genetics/genenetwork2/')

source('/Volumes/Macintosh_HD_3/genetics/genenetwork2/func_write_primary_data.R')
@


<<init, include=FALSE >>=
opts_chunk$set(include=FALSE,
               echo=FALSE,
               message=FALSE,
               warning=FALSE)
@

<<include=FALSE, echo=FALSE, results=hide>>=
# Generate a unique ID for this program by path and filename. This unique ID is attached to this file using a tag in the filesystem.
source('unique_id_generator.R')

fname <- c("/Volumes/Macintosh_HD_3/genetics/genenetwork2/blast_test_v2.Rnw")

prog.Name <- unique.ID(fname)

prog.Name

@

<< bioconductor_libs >>=
source("https://bioconductor.org/biocLite.R")

#biocLite('rBLAST')
install_github("mhahsler/rBLAST")

biocLite('Biostrings')
library('Biostrings')
library('rBLAST')

biocLite('annotate')

library('annotate')

biocLite("org.Hs.eg.db")   

library("org.Hs.eg.db")

@

<< read_data >>=
wball <- loadWorkbook('comt_correlations_20000_all_areas_augmentedNew.xlsx')   

# now tell R to read that workbook and which sheet
  prefront.Data <- data.frame(read.xlsx(wball,sheet = "prefrontal"))
  
  cbell.Data <- data.frame(read.xlsx(wball,sheet = "cerebellum"))

  tempor.Data <- data.frame(read.xlsx(wball,sheet = "temporal"))

  pons.Data <- data.frame(read.xlsx(wball,sheet = "pons"))


# create a list with these data frames to be used when the same operation is applied to all area
  
major.Area <- list(pf=prefront.Data,
                   cb=cbell.Data,
                   tm=tempor.Data,
                   po=pons.Data)

ib <- c(1:4)

# Read in the illumina_humanref_8_v2 excel file to get the entrez ids and gene symbols for all of the data from the 4 brain areas 

wbillum <- loadWorkbook('illumina_human_ref_8_v2v3.xlsx')   

# now tell R to read that workbook and which sheet
  illumina8v2.Data <- data.frame(read.xlsx(wbillum,sheet = "illumina_v2"))

@

<< missing_Chr_names >>=
  
  miss.Chr <- list()
  
  miss.Chr <- lapply(major.Area[ib], function(x,ib) which(is.na(x$loc)), ib)
  
@


<< rentrez_queries >>=

## Start here

# entrez_dbs()   # to see list of avaliable databases
# entrez_db_searchable(db='gene')   # to see list of search terms

loop.delay <- c(4)   # in seconds
rentrez.results <- list()


count.returned <- list(matrix(rep(NA,length(unlist(miss.Chr[[1]]))),ncol=1),
                       matrix(rep(NA,length(unlist(miss.Chr[[2]]))),ncol=1),
                       matrix(rep(NA,length(unlist(miss.Chr[[3]]))),ncol=1),
                       matrix(rep(NA,length(unlist(miss.Chr[[4]]))),ncol=1)
)

extract.feats <- c('uid','name','chromosome','chrstart')
     null.rentrez <- c(rep(NA,4))

for (ic in 1:1)   {
     
     rentrez.results.temp <- data.frame(uid=rep(NA,length(unlist(miss.Chr[[ic]]))),
                                   name=rep(NA,length(unlist(miss.Chr[[ic]]))),
                                   chromosome=rep(NA,length(unlist(miss.Chr[[ic]]))),
                                   start.pos=rep(NA,length(unlist(miss.Chr[[ic]])))
                                   )

     for (im in 1:length(unlist(miss.Chr[[ic]])))  {

          query <- c(major.Area[[ic]]$Symbol[unlist(miss.Chr[[ic]])][im])
          
          ######## DEBUG
          # query <- c("KLRA1P")
          # im <- c(6)
          # ik <- c(7)
          ##############
          
               try.rentrez <- entrez_search(db='gene',query)
               cat('count = ',as.character(try.rentrez$count))
               found.match <- c(FALSE)
               ik <- c(0)
               
          if (try.rentrez$count > 0)   {
               count.returned[[ic]][im] <- try.rentrez$count
           
          
#               for (ik in 1:try.rentrez$count)  {
                    while (!isTRUE(found.match) & ik < try.rentrez$count + 1)   {
                         ik <- ik + 1
                   cat('major ',as.character(major.Area[[ic]]$ENTREZID[unlist(miss.Chr[[ic]])][im]),' returned ',try.rentrez$ids[ik],' ') 
                    
                    if (!is.na(try.rentrez$ids[ik])) {
                         if (try.rentrez$ids[ik] == as.character(major.Area[[ic]]$ENTREZID[unlist(miss.Chr[[ic]])][im]))  {
                              cat('matched \n')
                              found.match <- c(TRUE)
                         temp.esumm <- entrez_summary(db='gene',id=try.rentrez$ids[ik])
               rentrez.results.temp[im,1:4] <- extract_from_esummary(temp.esumm,extract.feats)
               
                 }   else {
                    cat('no match \n')
                 }
                    } else {
                         
                    cat('uid was NA \n')
                    }
          }  # end while loop     
               
          } else {
               
               count.returned[[ic]][im] <- c(0)
               rentrez.results.temp[im,1:4] <- null.rentrez  # fill with NA   
          }
               

          
     Sys.sleep(loop.delay)    # because the entrez gene server will accept no more than 3 queries per second
     print(paste('brain area ',stand.Col.names[ic],' iteration ',im,sep=''))

          } # end missing chr loop
     
     rentrez.results[[ic]] <- rentrez.results.temp
     rentrez.results[[ic]]$start.pos <- rentrez.results[[ic]]$start.pos/1000000
     
     blank.in.chr <- which(rentrez.results[[ic]]$chromosome == '')
     nines.in.startpos <- which(rentrez.results[[ic]]$start.pos == 999.999999)
     
     rentrez.results[[ic]]$chromosome[c(blank.in.chr)] <- c(NA)
     rentrez.results[[ic]]$start.pos[c(nines.in.startpos)] <- c(NA)
     
     

} # end brain area loop
     
     
# Check for agreement between the returned uids and the ENTREZIDs of the missing rows
     

match.to.source <- list()


for (im in 1:4)   {
     
     temp.comp <- data.frame(major=as.character(major.Area[[im]]$ENTREZID[unlist(miss.Chr[[im]])]), rentrez=as.character(rentrez.results[[im]]$uid),stringsAsFactors=FALSE)

     entrez.diff <- setdiff(temp.comp[,1],temp.comp[,2])

     match.to.major <- as.integer(match(setdiff(temp.comp[,1],temp.comp[,2]),as.character(major.Area[[im]]$ENTREZID[unlist(miss.Chr[[im]])])))   # 31

     match.to.rentrez <- match(setdiff(temp.comp[,1],temp.comp[,2]),rentrez.results[[1]]$uid)  # no match

     match.to.source[[im]] <- c(what.diff=entrez.diff,
                                   maj=match.to.major,
                                   rentr=match.to.rentrez)
     match.to.source[[im]]['maj']  <- as.integer(match.to.source[[im]]['maj'])
}

# The first column shows the ENTREZID that was in the major.Area data.frame that was missing from the rentrez.results$uid data.frame. The second column shows the index of this ENTREZID in the list of missing rows, and the third column shows NA, meaning that the ENTREZID in the first column did not appear in the rentrez.results$uid.

# Looked up this entrezgene ID in the NCBI gene database and found the correct symbol, chromosome and start position for this ENTREZID. Now it needs to be substituted in each of the major.Area data.frames.
where.replace <- unlist(lapply(match.to.source[ib], function(x,i) as.integer(x[2]), ib))

rentrez.results[[1]][where.replace[1],1:4] <- c("144535",'CFAP54','12','96.489556')
rentrez.results[[2]][where.replace[2],1:4] <- c("144535",'CFAP54','12','96.489556')
rentrez.results[[3]][where.replace[3],1:4] <- c("144535",'CFAP54','12','96.489556')
rentrez.results[[4]][where.replace[4],1:4] <- c("144535",'CFAP54','12','96.489556')

# Necessary for match search below on ENTREZID
major.Area[[1]][unlist(miss.Chr[[1]])[where.replace[1]],c(15,3,16,17)] <- c("144535",'CFAP54','12','96.489556')
major.Area[[2]][unlist(miss.Chr[[2]])[where.replace[2]],c(15,3,16,17)] <- c("144535",'CFAP54','12','96.489556')
major.Area[[3]][unlist(miss.Chr[[3]])[where.replace[3]],c(15,3,16,17)] <- c("144535",'CFAP54','12','96.489556')
major.Area[[4]][unlist(miss.Chr[[4]])[where.replace[4]],c(15,3,16,17)] <- c("144535",'CFAP54','12','96.489556')

@

<< match_new_Chr_names >>=

#match.rentrez.uids <- match(as.character(major.Area[[1]]$ENTREZID[unlist(miss.Chr[[1]])]),
#                            first.hits$ENTREZID)
al <- c(1:length(major.Area[[1]]$Symbol[unlist(miss.Chr[[1]])]))

# match.rentrez.uids.temp <- lapply(rentrez.results[al], function(x,al,y,z) match(as.character(y[1]$ENTREZID[unlist(z)]),z), al, miss.Chr[al],rentrez.results[al])

retrieved.num <- c(0)

rentrez.results.uid <- list()

match.rentrez <- list()


######### DEBUG
#im <- c(1)

for (im in 1:4)  {
######### END DEBUG     
#     rentrez.results.uid[im] <- lapply(rentrez.results[[1]][1]
     rentrez.results.uid[[im]] <- lapply(rentrez.results[im], function(x) x[1])
     


     match.rentrez.temp <- data.frame(indx=rep(NA,length(unlist(miss.Chr[[im]]))),
                                      uid=rep(NA,length(unlist(miss.Chr[[im]]))), 
                                      chr_name=rep(NA,length(unlist(miss.Chr[[im]]))),
                                      symbol=rep(NA,length(unlist(miss.Chr[[im]]))), 
                                      start_pos=rep(NA,length(unlist(miss.Chr[[im]])))
                                 )

######## DEBUG
#     ix <- c(1)

for (ix in 1:length(unlist(miss.Chr[[im]])))  {
######## END DEBUG
     
     match.rentrez.temp[ix,1] <- match(as.character(major.Area[[im]]$ENTREZID[unlist(miss.Chr[[im]])[ix]]),unlist(rentrez.results.uid[[im]]))
     
     if (!is.na(match.rentrez.temp[ix,1]))  {
          match.rentrez.temp[ix,2] <- rentrez.results[[im]]$uid[match.rentrez.temp[ix,1]]
          match.rentrez.temp[ix,3] <- rentrez.results[[im]]$chromosome[match.rentrez.temp[ix,1]]
          match.rentrez.temp[ix,4] <- rentrez.results[[im]]$name[match.rentrez.temp[ix,1]]
          match.rentrez.temp[ix,5] <- rentrez.results[[im]]$start.pos[match.rentrez.temp[ix,1]]
          
               if (match.rentrez.temp[ix,5] == 999999999 || is.na(match.rentrez.temp[ix,5]))  {
                    match.rentrez.temp[ix,5] <- NA
               }   else {
               
               }
          
     } else {
          match.rentrez.temp[ix,2] <- NA
          match.rentrez.temp[ix,3] <- NA
          match.rentrez.temp[ix,4] <- NA
          match.rentrez.temp[ix,5] <- NA
          
     }

} # end area-specific loop
     
     match.rentrez[[im]] <- match.rentrez.temp
     
} # end brain loop

@

<< replace_missing_Chr_names >>=

# Note, the matching indices in match.rentrez.temp and match.rentrez are not strictly in order. There are duplicated matches.

# This only applies to major.Area[[1]] as written

entrez.comp.area <- list()

for (im in 1:4)    {



entrez.comp <- data.frame(majuid=major.Area[[im]]$ENTREZID[unlist(miss.Chr[[im]])],
                    rentruid=rentrez.results[[im]]$uid[unlist(match.rentrez[[im]]$indx)],
                    majchr=major.Area[[im]]$loc[unlist(miss.Chr[[im]])],
                    rentchr=rentrez.results[[im]]$chromosome[unlist(match.rentrez[[im]]$indx)],
                    majsymb=major.Area[[im]]$Symbol[unlist(miss.Chr[[im]])],
                    rentsymb=rentrez.results[[im]]$name[unlist(match.rentrez[[im]]$indx)],
                    majstart=round(as.numeric(major.Area[[im]]$bp[unlist(miss.Chr[[im]])]),6),
                    rentstart=round(as.numeric(rentrez.results[[im]]$start.pos[unlist(match.rentrez[[im]]$indx)]),6),
                          stringsAsFactors = FALSE
                          )

# replace blank rows in column 3 with NA
blank.indx.col3 <- which(entrez.comp[,3] == '')
          entrez.comp[c(blank.indx.col3),3] <- NA


     for (ik in 1:length(unlist(miss.Chr[[im]])))   {
          
          # union of start position columns
          
          if (is.na(entrez.comp[ik,7]) & !is.na(entrez.comp[ik,8]))   {

               entrez.comp[ik,7] <- entrez.comp[ik,8]
          } else if (!is.na(entrez.comp[ik,7]) & is.na(entrez.comp[ik,8]))  {

               entrez.comp[ik,8] <- entrez.comp[ik,7]
          } else if (!is.na(entrez.comp[ik,7]) & !is.na(entrez.comp[ik,8]))  {

          } else if (is.na(entrez.comp[ik,7]) & is.na(entrez.comp[ik,8]))  {

          }  else {

          }
          
          # union of chromosome columns with CHR names replacing NA
          
          if (is.na(entrez.comp[ik,3]) & !is.na(entrez.comp[ik,4]))   {
               
               entrez.comp[ik,3] <- entrez.comp[ik,4]
          } else if (!is.na(entrez.comp[ik,3]) & is.na(entrez.comp[ik,4]))  {
               
               entrez.comp[ik,4] <- entrez.comp[ik,3]
          } else if (!is.na(entrez.comp[ik,3]) & !is.na(entrez.comp[ik,4]))  {
               
          } else if (is.na(entrez.comp[ik,3]) & is.na(entrez.comp[ik,4]))  {
               
          }  else {
               
          }
} # end brain-area specific loop
          
          entrez.comp.area[[im]] <- entrez.comp
     
} # end brain area loop


@

<< one.off >>=

# Use the gene symbols from rentrez instead of the existing gene symbols for the missing rows
for (im in 1:4)   {

     entrez.comp.area[[im]][,5] <- sapply(entrez.comp.area[im], function(x) x$rentsymb)

} # end brain area loop

# One-off replacements


#pf
one.off.matx <- matrix(c(1,35,141.002591,'SPANXB1','X',   # SPANXB1 
                       1,19,95.407266,'SYNE3','14',       # LINC00341
                       1,11,28.505943,'RCC1','1',         # SNHG3-RCC1
                       1,50,2.184074,'MGC40069','14',
                       1,67,1.145160,'FLJ35816','4',
                       1,74,0.113348,'RNA28SN5','22',
                       1,77,11.976734,'SNX29','16'),      # RUNDC2A
                       ncol=5,byrow=TRUE
                       )

# redefine one.off.matx
#cb
one.off.matx <- matrix(c(2,12,141.002591,'SPANXB1','X',
                         2,41,11.976734,'SNX29','16',
                         2,64,95.407266,'SYNE3','14',
                         2,65,0.113348,'RNA28SN5','22'),
                         ncol=5,byrow=TRUE
                       )

# redefine one.off.matx
#tm
one.off.matx <- matrix(c(3,13,141.002591,'SPANXB1','X',
                         3,28,11.976734,'SNX29','16',
                         3,29,0.113348,'RNA28SN5','22',
                         3,47,28.505943,'RCC1','1',
                         3,57,2.184074,'MGC40069','14',
                         3,82,95.407266,'SYNE3','14'),
                         ncol=5,byrow=TRUE
                       )

# redefine one.off.matx
#po
one.off.matx <- matrix(c(4,13,141.002591,'SPANXB1','X',
                         4,39,11.976734,'SNX29','16',
                         4,53,95.407266,'SYNE3','14',
                         4,61,28.505943,'RCC1','1',
                         4,62,0.113348,'RNA28SN5','22',
                         4,77,2.184074,'MGC40069','14'),
                         ncol=5,byrow=TRUE
                       )


one.off <- data.frame(one.off.matx,stringsAsFactors = FALSE)
colnames(one.off) <- c('area','indx','startpos','symbol','chr')

one.off$area <- as.integer(one.off$area)
one.off$indx <- as.integer(one.off$indx)
one.off$startpos <- as.numeric(one.off$startpos)

for (iu in 1:dim(one.off.matx)[1]) {
     
     entrez.comp.area[[one.off$area[iu]]][one.off$indx[iu],3:8] <- one.off[iu,c(5,5,4,4,3,3)]

     }
@


<< substitute.new.values >>=
# Now do the replacement in major.Area, then in the primary data files, then compose the master.

for (im in 1:4)    {
          
      entrez.match.ENTR.indx <- match(major.Area[[im]]$ENTREZID[unlist(miss.Chr[[im]])],entrez.comp.area[[im]]$rentruid)
      
      major.Area[[im]]$Symbol[unlist(miss.Chr[[im]])] <- entrez.comp.area[[im]]$rentsymb[entrez.match.ENTR.indx]
      
      major.Area[[im]]$loc[unlist(miss.Chr[[im]])] <- entrez.comp.area[[im]]$rentchr[entrez.match.ENTR.indx]
      
      major.Area[[im]]$bp[unlist(miss.Chr[[im]])] <- entrez.comp.area[[im]]$rentstart[entrez.match.ENTR.indx]

} #end brain area loop
@

<< >>=
# generate report on missing values for the critical variables as well as Symbols starting with LOCxxx.

missing.and.LOC.report <- data.frame(symbol=rep(NA,4),
                                     Chr.name=rep(NA,4),
                                     start.pos= rep(NA,4),
                                     symb.LOC=rep(NA,4),
                                     entrez=rep(NA,4))

missing.and.LOC.report$symbol <- matrix(unlist(lapply(major.Area[ib], function(x,ib) num.NA(x$Symbol), ib)), ncol=1)

missing.and.LOC.report$Chr.name <- matrix(unlist(lapply(major.Area[ib], function(x,ib) num.NA(x$loc), ib)), ncol=1)

missing.and.LOC.report$start.pos <- matrix(unlist(lapply(major.Area[ib], function(x,ib) num.NA(x$bp), ib)), ncol=1)

missing.and.LOC.report$symb.LOC <- matrix(unlist(lapply(major.Area[ib], function(x,ib) sum(grepl('^LOC',x$Symbol)), ib)), ncol=1)

missing.and.LOC.report$entrez <- matrix(unlist(lapply(major.Area[ib], function(x,ib) num.NA(x$ENTREZID), ib)), ncol=1)

missing.and.LOC.report

missing.and.LOC.report.tab <- xtable( missing.and.LOC.report,
                    caption='All columns except symb.Loc show the number of missing or NA values.\n symb.Loc whows the number of genes symbols that still begin with LOC')

@



<< refill_primary_data >>=

prefront.Data <- major.Area[[1]]
cbell.Data <- major.Area[[2]]
tempor.Data <- major.Area[[3]]
pons.Data <- major.Area[[4]]

@

<< write_data_out >>=

success.of.write <- data.frame(prefront=NA,
                               cbell=NA,
                               tempor=NA,
                               pons=NA)

success.of.write <- write.primary(prefront.Data,
                                  cbell.Data,
                                  tempor.Data,
                                  pons.Data)

     success.of.write <- unlist(lapply(success.of.write[ib], function(x,ib) {if (x[ib]) {x[ib] = 'succeeded'} else {x[ib] = 'failed'}}, ib))
     
     success.of.write

@

\end{document}
