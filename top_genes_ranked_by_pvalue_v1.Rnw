\documentclass[11pt]{article}
\usepackage{rotating}
\usepackage{graphicx, subfig}
\usepackage{float}
\pagenumbering{arabic}
\usepackage{enumerate}
\usepackage{Sweave}
\usepackage{booktabs}
\usepackage[table]{xcolor}
\usepackage{framed}
\usepackage{longtable}
\usepackage{tablefootnote}
\usepackage{amsmath}
\usepackage{hyperref}
\usepackage{textcomp}
\usepackage{tabularx}

\setlength\parindent{0pt}

\begin{document}
\SweaveOpts{concordance=TRUE}
\SweaveOpts{keep.source=TRUE} 

\author{James L. Dannemiller \\ Rice University}
\title{COMT Expression Correlations in Four Brain Areas}
\maketitle
\today \\
Gene Network\\
Spring, 2018\\
{\textit {COMT}} catalyzes degradation of catecholamines including dopamine, norepinephrine and epinephrine.\\

\textlangle{}{\textit {pre post recovery missing stats v1.Rnw}}\textrangle{}: Program to generate tables pre- and post- preprocessing of the data on number of rows with missing observations on various variables. Additionally, some chromosomes were initiaslly listed as 'Un' for unknown.\\


<<include=FALSE,echo=FALSE,message=FALSE,warning=FALSE>>=

library(base)
library(knitr)
library(openxlsx)
library(xtable)
options(xtable.floating = TRUE)
options(xtable.timestamp = "")
library(magrittr)
library(tables)
library(plyr)
library(scales)
library(utils)
# library(ggman)
library(dplyr)
library(biomaRt)
library(stringr)
library(curl)
library(git2r)
library(githubinstall)
library(devtools)
library('xml2')
library(RCurl)
library(XML)
library(rentrez)
library(data.table)
library(pracma)
library(SOAR)
library(roxygen2)
library(GlobalOptions)
library(tidyr)
library(Hmisc)
library(tibble)

#opts_chunk$set(include=FALSE,echo=FALSE,message=FALSE,warning=FALSE)

# Function to catch warnings that a sheet has no data yet and returns NAs 
readPrime = function(x,y,z) {     
     tryCatch(data.frame(read.xlsx(x,sheet = y)),
            warning = function(w) {print(paste("no data ", y));
            return(z)},
            error = function(e) {print(paste("error reading data", y));
            return(z)}
)
}

work.path <- c('/Volumes/Macintosh_HD_3/genetics/genenetwork2/')

setwd(work.path)

options(scipen = 999, digits = 5, width = 60, knitr.table.format = "latex")
opts_chunk$set(include=FALSE,echo=FALSE,message=FALSE,warning=FALSE,results=tex)


@

<<include=FALSE,echo=FALSE,message=FALSE,warning=FALSE>>=

################ READ THIS LIST OF TO-BE SOURCED FUNCTIONS AND PROGRAMS IN #################

fileConn<-file('sourced_functions_programs.txt')
     sourced.Funcs <- 
          data.frame(rfunc=readLines(con=fileConn),stringsAsFactors = FALSE)

     temp.Funcs <- str_replace(sourced.Funcs$rfunc,',','.R')
          sourced.Funcs <- data.frame(rfunc=as.character(temp.Funcs),stringsAsFactors = FALSE)
     temp2.Funcs <- paste(work.path,sourced.Funcs$rfunc,sep='') 
          sourced.Funcs <- data.frame(rfunc=as.character(temp2.Funcs),stringsAsFactors = FALSE)
close(fileConn)

source(sourced.Funcs$rfunc[1:length(sourced.Funcs)])
#############################################################################################

# Read in the mapping between Chromosome names ordered by text (e.g., 1, 10, 11, 12...2, 20...) and ordered by number (e.g., 1, 2, 3, 4 ..., 22, X, Y)

wbchr <- loadWorkbook('order_Chr_by_num.xlsx')   

# now tell R to read that workbook and which sheet
  order.Chr.by.num <- data.frame(read.xlsx(wbchr,sheet = "chr_map"))


stand.Col.names.lc <- c("prefrontal",
                        "cerebellum",
                        "temporal",
                        "pons")

opt <- setGlobalOptions(
          recordTimestamps = FALSE,
          delta = 1,
          read.data = TRUE
          
)

@


<<include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=hide>>=
# Generate a unique ID for this program by path and filename. This unique ID is attached to this file using a tag in the filesystem.

          fname <- csf()   # function to get current path including file name

          prog.Name <- unique.ID(fname)

          prog.Name   # unique ID based on hash of file name

# Write out the file_name, unique ID and date/time to '.Rscriptnames'

          rec.script(eval(fname),eval(prog.Name))

@

<<read_data,include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=hide>>=

################# Already processed data ######################

if(opt('read.data')) {

wball <- loadWorkbook('comt_correlations_20000_all_areas_augmentedNew.xlsx')   

# now tell R to read that workbook and which sheet
  prefront.Data <- data.frame(read.xlsx(wball,sheet = "prefrontal"))
  
  cbell.Data <- data.frame(read.xlsx(wball,sheet = "cerebellum"))

  tempor.Data <- data.frame(read.xlsx(wball,sheet = "temporal"))

  pons.Data <- data.frame(read.xlsx(wball,sheet = "pons"))
  
  Store(prefront.Data,
        cbell.Data,
        tempor.Data,
        pons.Data)


# create a list with these data frames to be used when the same operation is applied to all area
  
major.Area <- list(pf=prefront.Data,
                   cb=cbell.Data,
                   tm=tempor.Data,
                   po=pons.Data)

} else {
     
}

################# END Already processed data #######################
          
          



@

<<pre.post.ChrUn.Table,include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=tex >>=

# summ.pre.post.Stats <- list()
# 
# 
# ib <- seq_len(4)
# 
# 
# count.Un.pre.post <- data.frame(matrix(rep(0,12),ncol=4))
# 
# for (lm in ib) {
#      
#      
#      
#      DT <- data.table(x=as.character(orig.major.Area[[lm]]$Location),
#                  y=as.character(major.Area[[lm]]$loc)
#                  )
# 
#      DT[,test1 := (grepl('^ChrUn',x)), by=x]
#      
#      DT[,test2 := (is.na(y)), by=y]
#      
#      count.Un.pre.post[1,lm] <- dim(major.Area[[lm]])[1]
#      count.Un.pre.post[2,lm] <- count.Un.pre.post[1,lm] - sum(DT$test1)
#      count.Un.pre.post[3,lm] <- count.Un.pre.post[1,lm] - sum(DT$test2)
# 
#      
# } # end brain area loop
# 
# colnames(count.Un.pre.post) <- stand.Col.names.lc
# 
# row.names(count.Un.pre.post) <- c('Number of probes',
#                                   'Original',
#                                   'Processed')
# 
# summ.pre.post.Stats[[1]] <- count.Un.pre.post
# 
# summ.pre.post.ChrUnNA.tab <- xtable(summ.pre.post.Stats[[1]],
#                                   align=c('l','X','X','X','X'),
#                                   caption='Total numbers of probes (Row 1), original number of probes with chromosome names identified (Row 2), number of probes with chromosome names identified after processing (Row 3).',
#                                   digits=c(rep(0,5))
#                                   )
# 
# print(summ.pre.post.ChrUnNA.tab,rownames=TRUE,caption.placement = "top",
#       hline.after=c(-1, 0, 3),
#       rotate.colnames = TRUE,
#       tabular.environment = "tabularx", 
#       width = "\\textwidth"
#       )

@


<<genes.per.chromosome,include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=tex >>=

data.posr <- list()
data.negr <- list()
data.posr.loc <- list()
data.negr.loc <- list()
data.posnegr <- list()
dfneg <- list()
dfpos <- list()
dfpossort <- list()
dfnegsort <- list()

for (im in ib)  {
     
     data.posr[[im]] <-
          major.Area[[im]]  %>%
               filter(as.logical(corsign == '1')) 

     
     data.posr.loc[[im]] <- data.posr[[im]]$loc
     

     data.negr[[im]] <-
          major.Area[[im]]  %>%
               filter(as.logical(corsign == '-1')) 
     
     data.negr.loc[[im]] <- data.negr[[im]]$loc
     
     
     data.posnegr[[im]] <- na.omit(major.Area[[im]][order(major.Area[[im]]$corsign,decreasing=TRUE),])
     

     dfpos[[im]] <- data.frame(table(na.omit(data.posr.loc[[im]])))
     
     dfneg[[im]] <- data.frame(table(na.omit(data.negr.loc[[im]])))

     
     dfpos[[im]] <- data.frame(dfpos[[im]],chr=c(1,10,11,12,13,14,15,16,17,18,19,2,20,21,22,3,4,5,6,7,8,9,23,24))
     dfpos[[im]]$chr <- as.numeric(dfpos[[im]]$chr)
     dfpossort[[im]] <-dfpos[[im]][order(dfpos[[im]]$chr), ]
     print(dfpossort[[im]][,1:2])
     
     dfneg[[im]] <- data.frame(dfneg[[im]],chr=c(1,10,11,12,13,14,15,16,17,18,19,2,20,21,22,3,4,5,6,7,8,9,23,24))
     dfneg[[im]]$chr <- as.numeric(dfneg[[im]]$chr)
     dfnegsort[[im]] <-dfneg[[im]][order(dfneg[[im]]$chr), ]
     print(dfnegsort[[im]][,1:2]) 
}


probes.per.chromosome <- data.frame(pfpos=c(rep(NA,24)),
                                    pfneg=c(rep(NA,24)),
                                    cbpos=c(rep(NA,24)),
                                    cbneg=c(rep(NA,24)),
                                    tmpos=c(rep(NA,24)),
                                    tmneg=c(rep(NA,24)),
                                    popos=c(rep(NA,24)),
                                    poneg=c(rep(NA,24)),
                                    sumpos=c(rep(NA,24)),
                                    sumneg=c(rep(NA,24))
                                    )
nchr <- seq_len(24)

probes.per.chromosome[,1] <- as.integer(dfpossort[[1]][,2])
probes.per.chromosome[,2] <- as.integer(dfnegsort[[1]][,2])

probes.per.chromosome[,3] <- as.integer(dfpossort[[2]][,2])
probes.per.chromosome[,4] <- as.integer(dfnegsort[[2]][,2])

probes.per.chromosome[,5] <- as.integer(dfpossort[[3]][,2])
probes.per.chromosome[,6] <- as.integer(dfnegsort[[3]][,2])

probes.per.chromosome[,7] <- as.integer(dfpossort[[4]][,2])
probes.per.chromosome[,8] <- as.integer(dfnegsort[[4]][,2])



     for (ik in nchr)  {
          probes.per.chromosome[ik,9] <- sum(probes.per.chromosome[ik,c(1,3,5,7)])
          probes.per.chromosome[ik,10] <- sum(probes.per.chromosome[ik,c(2,4,6,8)])
     }

for (im in seq_len(2*max(ib)+2))  {
     
     probes.per.chromosome[25,im] <- sum(probes.per.chromosome[nchr,im])
     
     probes.per.chromosome[25,im] <- sum(probes.per.chromosome[nchr,im])
     
}

row.names(probes.per.chromosome) <- c(as.character(seq_len(22)),'X','Y','Total')

probes.per.chromosome.tab <- xtable(probes.per.chromosome,
                                    caption='Number of probes with expression positively (Columns 1, 3, 5, 7) and negatively (Columns 2, 4, 6, 8) correlated with COMT expression by brain area. Sums are in the last row and by chromosome across brain areas in Column 9 (positively correlated) and Column 10 (negatively correlated).',
                                    align=c('r',rep('X',10)),
                                    digits=c(rep(0,11))
                                    )


probes.per.chromosome.tab2 <- latex(probes.per.chromosome.tab,file='',
                   caption = paste0('Number of probes with expression positively (Columns 1, 3, 5, 7) and negatively (Columns 2, 4, 6, 8) correlated with COMT expression by brain area. Sums are in the last row and by chromosome across brain areas in Column 9 (positively correlated) and Column 10 (negatively correlated).',sep=''),
                      caption.loc = c('top'),
                      cgroup = c('Prefrontal','','Cerebellum','','Temporal',
                                 '','Pons','','Positive','','Negative'),
                      n.cgroup = c(2,1,2,1,2,1,2,1,1,1,1),
#                     colheads = add.col.Groups,
                      extracolheads = c('Brain Area'),
                      rowlabel = 'Chromosome',
                      rowlabel.just = c('r'),
#                     rowname = stand.Col.names[2:4],
                      colheads = c(rep(c('positive','negative'),2),rep('Sum',2)),
#                      colnamesTexCmd="bfseries",
                     booktabs=TRUE,
                     label=c('tab:probesperchrom'),
                     na.blank = TRUE,
                     vbar = FALSE,
                     longtable=TRUE,
                     table.env=TRUE,
                     center=c('center'),
                     continued=c('Number of Probes per Chrmosome Continued'),
                     first.hline.double = FALSE,
                     append=FALSE
#                     insert.bottom = bottom.Note,
#                     insert.bottom.width = c('6in')
                     )


@


\vspace{1em}

<<probes.per.gene,include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=tex >>= 

# prefrontal
probes.per.gene1 <- table(table(major.Area[[1]]$Symbol))
probes.per.gene1
#     1     2     3     4     5     6     7     8 
# 14235  1651   695    73    13     1     1     1 

categ1 <- as.integers(c(row.names(probes.per.gene1)))
sum(categ1*probes.per.gene1)
# [1] 20000


probes.per.gene <- list()
probes.per.gene <- lapply(major.Area[ib], function(x,ib) table(table(x$Symbol)), ib)


probes.per.gene$cb[8] <- c(0)
names(probes.per.gene$cb) <- c(as.character(seq_len(8)))

probes.per.gene.df <- data.frame(t(matrix(unlist(probes.per.gene),ncol=4)))
row.names(probes.per.gene.df) <- stand.Col.names
colnames(probes.per.gene.df) <- c(seq_len(8))

hold.sum <- matrix(rep(0,4),ncol=1)
for (im in ib)   {
     
     hold.sum[im] <- sum(il*probes.per.gene.df[im,])
}


probes.per.gene.df[,9] <- hold.sum
colnames(probes.per.gene.df)[9] <- c('Sum(probes)')

probes.per.gene.tab <- xtable(probes.per.gene.df,
                              caption=c('Frequencies of genes with 1, 2, 3 ... 8 probes/transcripts.'),
                              align=c('l',rep('r',8),'c')
)

probes.per.gene.tab.ltx <- latex(probes.per.gene.tab,file='',
                   caption = c('Distributions of genes with 1, 2, 3 ... 8 probes per gene by brain area.'),
                         caption.loc = c('top'),
#                         rowlabel = 'Brain Area',
#                         rowlabel.just = c('l'),
                         colnamesTexCmd="bfseries",
                         cgroup=c('Number of Probes per Gene',''),
                         n.cgroup=c(8,1),
                         rgroup=c('Brain Area'),
                         n.rgroup=c(4),
                         booktabs=TRUE,
                         label=c('tab:probespergene'),
                         na.blank = TRUE,
                         vbar = FALSE,
                         longtable=FALSE,
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=FALSE
                         )


@

<<probes.per.gene2,include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=tex>>= 
# See running notes entry May 1, 2018

gene.Symbol.table.pf <- as.data.frame(table(prefront.Data$Symbol))
gene.Symbol.table.cb <- as.data.frame(table(cbell.Data$Symbol))
gene.Symbol.table.tm <- as.data.frame(table(tempor.Data$Symbol))
gene.Symbol.table.po <- as.data.frame(table(pons.Data$Symbol))

max.probes <- max(max(as.numeric(as.data.frame(table(gene.Symbol.table.pf[,2]))[,1])),
    max(as.numeric(as.data.frame(table(gene.Symbol.table.cb[,2]))[,1])),
    max(as.numeric(as.data.frame(table(gene.Symbol.table.tm[,2]))[,1])),
    max(as.numeric(as.data.frame(table(gene.Symbol.table.po[,2]))[,1])))

probecount.List <- list()

probecount.List[[1]] <- as.data.frame(table(gene.Symbol.table.pf[,2]))
probecount.List[[2]] <- as.data.frame(table(gene.Symbol.table.cb[,2]))
probecount.List[[3]] <- as.data.frame(table(gene.Symbol.table.tm[,2]))
probecount.List[[4]] <- as.data.frame(table(gene.Symbol.table.po[,2]))

for (j in 1:4) {
if (dim(probecount.List[[j]])[1] < (max.probes+1)) {
     diff.probe <- max.probes - dim(probecount.List[[j]])[1] + 1
     
          probecount.tmp <- data.frame(np=seq(1,(dim(probecount.List[[j]])[1]+diff.probe),1),
                                   probe.count=rep(0,dim(probecount.List[[j]])[1]+diff.probe))
          probecount.tmp[,2] <- c(probecount.List[[j]][,2],rep(0,diff.probe))
          probecount <- probecount.tmp
          probecount[dim(probecount)[1],2] <- sum(probecount[1:8,2]*probecount[1:8,1])
          probecount[,1] <- c(seq(1,(dim(probecount)[1]-1),1),'Total')
          probecount.List[[j]] <- probecount
          
} else {}

}

tab.probe.counts <- data.frame('Number of Probes' = probecount.List[[1]][,1],
                               PfCx = probecount.List[[1]][,2],
                               Cereb = probecount.List[[2]][,2],
                               TmpCx = probecount.List[[3]][,2],
                               Pons = probecount.List[[4]][,2])

@

<<include=FALSE,echo=FALSE,results=hide>>=
# Plot the distribution of probes per gene for each area

stacked.data.Form <- stack(tab.probe.counts[1:8,])
stacked.data.Form[,3] <- c(rep(seq(1,8,1),4))
stacked.data.Form[,4] <- sqrt(stacked.data.Form[,1])
colnames(stacked.data.Form) <- c('Frequency','Area','ProbesPerGene','SqrtCount')

area_names <- c('PfCx' = "Prefrontal Cortex",
                    'Cereb' = "Cerebellum",
                    'TmpCx' = "Temporal Cerebral Wall",
                    'Pons' = "Pons"
                    )

p <- ggplot(stacked.data.Form, aes(ProbesPerGene,SqrtCount)) + geom_bar(stat='identity')

p + facet_wrap(~ Area,ncol=2,labeller = as_labeller(area_names)) +
     theme_bw() +
     theme(strip.background=element_rect(fill="gray")) +
     theme(strip.text = element_text(colour = 'black')) +
     
     labs(x = c("Number of Probes per Gene"),
          y = c('Square Root (Frequency)'),
          title = c('Probes per Gene Distribution by Brain Area')) +
     theme(axis.text=element_text(size=7),
        axis.title=element_text(size=9)) +
     theme(plot.title=element_text(size=10,
                                   hjust=0.5)) +
     
     scale_x_discrete(breaks=c('1','2','3','4','5','6','7','8'),
          labels=c('1','2','3','4','5','6','7','8'),
          limits=c('1','2','3','4','5','6','7','8'))
     
@

<<use.max.mean.expr,include=FALSE,echo=FALSE,message=FALSE,warning=FALSE, results=tex>>=
area.List.byGene <- list()

for (h in ib) {

Data.bygene <- major.Area[[h]][order(major.Area[[h]]$Symbol),]


grouped.Area.gene <- Data.bygene %>% group_by(Data.bygene$Symbol) 

area.Data.maxExpr <- grouped.Area.gene %>% summarise(

     n = n(),
     maxExpr = round(max(Mean),3)

)

area.Data.maxExpr <- as.data.frame(area.Data.maxExpr)

area.Data.selected <- matrix(rep(NA,dim(area.Data.maxExpr)[1]*dim(Data.bygene)[2]),
                                 nrow=dim(area.Data.maxExpr)[1],
                                 ncol=dim(Data.bygene)[2])

area.Data.selected <- as.data.frame(area.Data.selected)
colnames(area.Data.selected) <- colnames(Data.bygene)
maxExpr.indx <- matrix(rep(NA,dim(area.Data.maxExpr)[1]),
                       nrow=dim(area.Data.maxExpr)[1])

true.Indx.bott = 0
true.Indx.top = 0

num.max <- matrix(rep(NA,dim(area.Data.maxExpr)[1]))

# When there are at least two maximum expression levels that are identical when there are multiple probes per gene, use the probe/row with the maximum abs(r)

select.Rows.mult.max <- c('max.r')   # 'max.r' or 'avg.r'

for (k in 1:dim(area.Data.maxExpr)[1]) {

     true.Indx.bott = true.Indx.top + 1
     true.Indx.top = true.Indx.bott + (area.Data.maxExpr$n[k] -1)
     
     diff.Indx <- true.Indx.top - true.Indx.bott
     
     if (diff.Indx == 0) {
          
          area.Data.selected[k,] <- Data.bygene[true.Indx.top,]
          
     } else if (diff.Indx > 0) {
          
          maxExpr.indx <- which(grouped.Area.gene$Mean[true.Indx.bott:true.Indx.top] == max(grouped.Area.gene$Mean[true.Indx.bott:true.Indx.top]))
          
          num.max[k] <- length(maxExpr.indx)
          
          if (num.max[k] == 1)  {
               
               area.Data.selected[k,] <- Data.bygene[true.Indx.bott + (maxExpr.indx - 1),]
               
          } else if (num.max[k] > 1) {
               
               # avg.r <- sum(Data.bygene$Sample.r[true.Indx.bott + (maxExpr.indx[1:num.max] - 1)])/num.max
               # area.Data.selected[k,] <- Data.bygene[true.Indx.bott + (maxExpr.indx[1] - 1),]
               # area.Data.selected$Sample.r[k] <- avg.r
               
               pick.Max.r.indx <- which(abs(Data.bygene$Sample.r[true.Indx.bott + (maxExpr.indx[1:num.max[k]] - 1)]) == max(abs(Data.bygene$Sample.r[true.Indx.bott + (maxExpr.indx[1:num.max[k]] - 1)])))
               area.Data.selected[k,] <- Data.bygene[true.Indx.bott + (pick.Max.r.indx - 1),]

               
          } else {
               
          }
          
     } else {
          
     }
     
     
}

# The data are not sorted within a brain area by the sign and magnitude of the correlation.
area.List.byGene[[h]] <- area.Data.selected

} #end loop over the four areas

@

<<order.by.pval>>=
byOne.Gene.dims <- c(dim(area.List.byGene[[1]])[1],
                     dim(area.List.byGene[[2]])[1],
                     dim(area.List.byGene[[3]])[1],
                     dim(area.List.byGene[[4]])[1])

# prefront.Data.onegene <- area.List.byGene[[1]]
# cbell.Data.onegene <- area.List.byGene[[2]]
# tempor.Data.onegene <- area.List.byGene[[3]]
# pons.Data.onegene <- area.List.byGene[[4]]

# Order the one gene data by Pval

order.by.Pval <- list()

# These are not sorted by sign of correlation
order.by.Pval <- lapply(area.List.byGene[ib], function(x,ib) x[order(x$Sample.p.r.,decreasing=FALSE),],ib)

# In all four areas, the soluble form of COMT had a higher expression level than the membrane 
# bound form. For that reason, the membrane bound form (r = 1) was no longer included in the 
# results when the gene with the maximum expression level was used to represent a gene with multiple probes.

@

<<top.500.by.Pval>>=
##### *****  Ordered by Pval ****** ##########################
# now get the 500 genes with the lowest Pvals both independently of the sign of the correlation, and separating the positively and negatively correlated genes.

# First get the 500 with the lowest Pvals independently of the sign of the correlation
top.Cut <- c(500)

hold.Largest.corrs <- data.frame(pfPos=rep(NA,top.Cut),
                                 cbPos=rep(NA,top.Cut),
                                 tmPos=rep(NA,top.Cut),
                                 poPos=rep(NA,top.Cut),
                                 pfNeg=rep(NA,top.Cut),
                                 cbNeg=rep(NA,top.Cut),
                                 tmNeg=rep(NA,top.Cut),
                                 poNeg=rep(NA,top.Cut))

hold.Lowest.pvals <- list()
cut.lims <- matrix(c(2,(top.Cut + 1),
                   2,(top.Cut + 3),
                   2,(top.Cut + 1),
                   2,(top.Cut + 1)),
                   ncol=2,byrow = TRUE)

hold.Lowest.pvals <- lapply(order.by.Pval[ib], function(x,ib,y) x[1:(top.Cut+1),], ib,top.Cut)

top.by.Pval.by.chrom <- lapply(hold.Lowest.pvals[ib], function(x,ib,y) table(x$loc)[y],ib,order.Chr.by.num$pos)

top.by.Pval.by.chrom.df <- matrix(c(as.matrix(top.by.Pval.by.chrom[[1]]),
                                    as.matrix(top.by.Pval.by.chrom[[2]]),
                                    as.matrix(top.by.Pval.by.chrom[[3]]),
                                    as.matrix(top.by.Pval.by.chrom[[4]])),
                                    ncol=4
                                      )

top.by.Pval.by.chrom.df <- data.frame(top.by.Pval.by.chrom.df)

top.by.Pval.by.chrom.df[24,1:4] <- c(rep(0,4))
colnames(top.by.Pval.by.chrom.df) <- stand.Col.names
row.names(top.by.Pval.by.chrom.df) <- c(as.character(seq_len(22)),'X','Y')


top.by.Pval.by.chrom.tab <- xtable(top.by.Pval.by.chrom.df,
                                   caption=c('Number of genes on each chromosome among the 500 genes with the lowest p-values for the correlation of their expression with COMT expression.'),
                                   align=c('l',rep('c',4))
)

print(top.by.Pval.by.chrom.tab,rotate.colnames = TRUE)

top.by.Pval.by.chrom.ltx <- latex(top.by.Pval.by.chrom.tab,file='',
                   caption = c('Number of genes on each chromosome among the 500 genes with the lowest p-values for the correlation of their expression with COMT expression.'),
                         caption.loc = c('top'),
#                         rowlabel = 'Brain Area',
#                         rowlabel.just = c('l'),
                         colnamesTexCmd="bfseries",
                         rowlabel=c('Chromosome'),
                         rowlabel.just=c('l'),
                         booktabs=TRUE,
                         label=c('tab:top.genes.by.chr'),
                         na.blank = TRUE,
                         vbar = FALSE,
                         longtable=FALSE,
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=FALSE
                         )

@

<<save.top.500>>=

success.write.status <- write.general(hold.Lowest.pvals[[1]],
                                      hold.Lowest.pvals[[2]],
                                      hold.Lowest.pvals[[3]],
                                      hold.Lowest.pvals[[4]],
                                      'top_500_pval_ranked_prefrontal',
                                      'top_500_pval_ranked_cerebellum',
                                      'top_500_pval_ranked_temporal',
                                      'top_500_pval_ranked_pons')

@


<<chi.sq.genes.by.chr>>=

any.Y(order.by.Pval[[1]],2,500)

hold.chiSq.by.pval <- list()

for (im in ib)  {
     
     x.or.y <- any.Y(order.by.Pval[[im]],cut.lims[im,1],cut.lims[im,2]) 
     hold.chiSq.by.pval[[im]] <- chisq.genes.By.chr(major.Area[[im]],top.by.Pval.by.chrom.df[,im],order.Chr.by.num$pos,cut.lims[im,1],cut.lims[im,2],x.or.y)

}

report.chisq.by.pval <- 
     hold.chiSq.by.pval %>%
          as.list()

report.chisq.by.pval.df <- data.frame(Chi.sq=rep(NA,4),
                                      df=rep(NA,4),
                                      p.value=rep(NA,4)
                                      )

report.chisq.by.pval.df$Chi.sq <- lapply(report.chisq.by.pval[ib], function(x,ib) round(x$statistic,2), ib)
report.chisq.by.pval.df$df <- lapply(report.chisq.by.pval[ib], function(x,ib) x$parameter, ib)
report.chisq.by.pval.df$p.value <- lapply(report.chisq.by.pval[ib], function(x,ib) round(x$p.value,5), ib)


# chi-squared test of independence: genes per chromosome (top 500 by pval) X brain area

alt.maj.A <- data.frame(matrix(rep(NA,4000)),ncol=2)
alt.maj.A[1:500,1] <- hold.Lowest.pvals[[1]]$loc[1:500]
alt.maj.A[501:1000,1] <- hold.Lowest.pvals[[2]]$loc[1:500]
alt.maj.A[1001:1500,1] <- hold.Lowest.pvals[[3]]$loc[1:500]
alt.maj.A[1501:2000,1] <- hold.Lowest.pvals[[4]]$loc[1:500]
alt.maj.A[,2] <- c(rep(c('pf','cb','tm','po'),each=500))
colnames(alt.maj.A) <- c('loc','brain.area')

alt.maj.A.tab <- table(alt.maj.A$brain.area,alt.maj.A$loc)

hold.chiSq.indep.by.pval <- chisq.test(alt.maj.A.tab)


report.results <- c(seq_len(3))
report.chisq.indep.by.pval <- 
     hold.chiSq.indep.by.pval %>%
          as.list()

report.chisq.indep.by.pval.df <- data.frame(Chi.sq=NA,
                                      df=NA,
                                      p.value=NA
                                      )

report.chisq.indep.by.pval.df$Chi.sq <- lapply(report.chisq.indep.by.pval[report.results], function(x,report.results) round(x$statistic,2), report.results)
report.chisq.indep.by.pval.df$df <- lapply(report.chisq.indep.by.pval[report.results], function(x,report.results) x$parameter, report.results)
report.chisq.indep.by.pval.df$p.value <- lapply(report.chisq.indep.by.pval[report.results], function(x,report.results) round(x$p.value,5), report.results)

report.chisq.indep.by.pval.df <- lapply(report.chisq.indep.by.pval[report.results], function(x,report.results) x, report.results)

report.chisq.by.pval.df[5,] <- report.chisq.indep.by.pval.df

report.chisq.by.pval.df[5,1] <- round(as.numeric(report.chisq.by.pval.df[5,1]),2)
report.chisq.by.pval.df[5,3] <- round(as.numeric(report.chisq.by.pval.df[5,3]),5)

colnames(report.chisq.by.pval.df) <- c('Chi-squared',
                                       'df',
                                       'p-value')

row.names(report.chisq.by.pval.df) <- c(stand.Col.names,'chromosome x brain area')

report.chisq.by.pval.tab <- xtable(report.chisq.by.pval.df,
                                   caption=c('Chi-squared tests of distribution within each brain area (Rows 1:4), and Chi-squared test of independence Chromosome gene counts x brain area. For the distribution tests, the distributions of gene counts across chromosomes for the 500 genes with the lowest p-values for their expression correlations with COMT are compared to the distribution of gene counts across chromosomes for all genes in the data set. For the test of independence, the distributions of gene counts across chromosomes for the 500 genes with the lowest p-values for their expression correlations with COMT are compared to each other. Rejection of independence would mean that the distribution across chromosomes of the 500 genes with the lowest p-values differed across brain areas.'),
                                             align=c('l',rep('c',3)))


report.chisq.by.pval.ltx <- latex(report.chisq.by.pval.tab,file='',
                   caption=c('Chi-squared tests of distribution within each brain area (Rows 1:4), and Chi-squared test of independence Chromosome gene counts x brain area. For the distribution tests, the distributions of gene counts across chromosomes for the 500 genes with the lowest p-values for their expression correlations with COMT are compared to the distribution of gene counts across chromosomes for all genes in the data set. For the test of independence, the distributions of gene counts across chromosomes for the 500 genes with the lowest p-values for their expression correlations with COMT are compared to each other. Rejection of independence would mean that the distribution across chromosomes of the 500 genes with the lowest p-values differed across brain areas.'),
                         caption.loc = c('top'),
                         colnamesTexCmd=c("bfseries"),
                         rowlabel=c(''),
                         rowlabel.just=c('l'),
                         rgroup=c('Distribution tests','Independence test'),
                         n.rgroup=c(4,1),
                         rgroupTexCmd=c("bfseries"),
                         booktabs=TRUE,
                         label=c('tab:chi.sq.by.pval'),
                         na.blank = TRUE,
                         vbar = FALSE,
                         longtable=FALSE,
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=FALSE
                         )



temp.text <- c('')
for (im in ib)  {
     
     temp.text <- c(temp.text,paste(stand.Col.names[im],': ','Chi-squared =',hold.chiSq.by.pval[[im]]$statistic,',',
                         'df =',hold.chiSq.by.pval[[im]]$parameter,',',
                         'p =',hold.chiSq.by.pval[[im]]$p.value,
                      sep=' '))
}


temp.text <- temp.text[2:5]
temp.text[5] <- c('Chi-squared test of independence for Chromosome versus brain ares: counts of genes within the top 500 ranked by Pvalue;')
temp.text[6] <- paste('Chi-squared =',hold.chiSq.indep.by.pval[[1]],',',
                         'df =',hold.chiSq.indep.by.pval[[2]],',',
                         'p =',hold.chiSq.indep.by.pval[[3]],
                      sep=' ') 
     
fileConn<-file("chisq_by_pval_final.txt")
     writeLines(temp.text,fileConn)
close(fileConn)

@

<<top.genes.in.common.across.brain.areas>>=

# pairs

temp.mat <- list()
comp.areas <- matrix(c(1,2,paste(stand.Col.names[1],stand.Col.names[2],sep=' and '),
                     1,3,paste(stand.Col.names[1],stand.Col.names[3],sep=' and '),
                     1,4,paste(stand.Col.names[1],stand.Col.names[4],sep=' and '),
                     2,3,paste(stand.Col.names[2],stand.Col.names[3],sep=' and '),
                     2,4,paste(stand.Col.names[2],stand.Col.names[4],sep=' and '),
                     3,4,paste(stand.Col.names[3],stand.Col.names[4],sep=' and ')),
                     ncol=3,byrow=TRUE)
b <- seq_len(dim(comp.areas)[1])

rows.for.tabs <- c(4)

for (nj in b)   {

     temp.mat[[nj]] <- vect2mat(intersect(hold.Lowest.pvals[[as.integer(comp.areas[nj,1])]]$Symbol,hold.Lowest.pvals[[as.integer(comp.areas[nj,2])]]$Symbol),rows.for.tabs)
     colnames(temp.mat[[nj]]) <- c(rep('',rows.for.tabs))
     row.names(temp.mat[[nj]]) <- c(rep('',dim(temp.mat[[nj]])[1]))
}

@

<<save.genes.in.common.pval.rank >>=
genes.in.common.tabs <- list()

 for (nj in 2:dim(comp.areas)[1])   {

###### Write out first table to file to be able to append subsequent tables
     
     genes.in.common.tabs[[nj]] <- xtable(temp.mat[[nj]],
                                    caption=comp.areas[nj,3])
     
     genes.in.common.ltx <- latex(genes.in.common.tabs[[nj]],file='genes_in_common_pval_ranked_final.tex',
                   caption=paste('Genes from the top 500 genes in each brain area ranked by p-values shared in common between: ',comp.areas[nj,3],sep=''),
                         caption.loc = c('top'),
                         booktabs=TRUE,
                         label=c('tab:genes.in.common.pval.ranked'),
                         na.blank = TRUE,
                         rowlabel=c(''),
                         colheads=c(rep('',rows.for.tabs)),
                         vbar = FALSE,
                         longtable=TRUE,
                         continued=paste(comp.areas[nj,3],' continued',sep=''),
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=TRUE
                         )
}
@

<<genes.unique.to.an.area>>=

# Prefrontal
temp.union23 <- union(hold.Lowest.pvals[[2]]$Symbol,hold.Lowest.pvals[[3]]$Symbol)
temp.union234 <- union(hold.Lowest.pvals[[4]]$Symbol,temp.union23)
temp.unique.1v234 <- setdiff(hold.Lowest.pvals[[1]]$Symbol,temp.union234)
temp.unique.prefrontal <- vect2mat(temp.unique.1v234,rows.for.tabs)
     colnames(temp.unique.prefrontal) <- c(rep('',rows.for.tabs))
     row.names(temp.unique.prefrontal) <- c(rep('',dim(temp.unique.prefrontal)[1]))
     

temp.unique.prefrontal.tab <- xtable(temp.unique.prefrontal,
                                     caption=c('The 199 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Prefrontal Cortex but not found among the 500 most highly COMT-correlated genes in Cerebellum, Temporal Cortex, or Pons.'))

unique.prefrontal.ltx <- latex(temp.unique.prefrontal.tab,file='unique_prefrontal_genes_pval_ranked.tex',
                   caption=paste('The 199 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Prefrontal Cortex but not found among the 500 most highly COMT-correlated genes in Cerebellum, Temporal Cortex, or Pons.',sep=''),
                         caption.loc = c('top'),
                         booktabs=TRUE,
                         label=c('tab:genes.unique.prefrontal.pval.ranked'),
                         na.blank = TRUE,
                         rowlabel=c(''),
                         colheads=c(rep('',rows.for.tabs)),
                         vbar = FALSE,
                         longtable=TRUE,
                         continued=paste('Unique genes ',stand.Col.names[1],' continued',sep=''),
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=FALSE
                         )


# Cerebellum
temp.union13 <- union(hold.Lowest.pvals[[1]]$Symbol,hold.Lowest.pvals[[3]]$Symbol)
temp.union134 <- union(hold.Lowest.pvals[[4]]$Symbol,temp.union13)
temp.unique.2v134 <- setdiff(hold.Lowest.pvals[[2]]$Symbol,temp.union134)
temp.unique.cerebellum <- vect2mat(temp.unique.2v134,rows.for.tabs)
     colnames(temp.unique.cerebellum) <- c(rep('',rows.for.tabs))
     row.names(temp.unique.cerebellum) <- c(rep('',dim(temp.unique.cerebellum)[1]))

temp.unique.cerebellum.tab <- xtable(temp.unique.cerebellum,
                                     caption=c('The 236 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Cerebellum but not found among the 500 most highly COMT-correlated genes in Prefrontal Cortex, Temporal Cortex, or Pons.'))



unique.cerebellum.ltx <- latex(temp.unique.cerebellum.tab,file='area_unique_genes_pval_ranked.tex',
                   caption=paste('The 236 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Cerebellum but not found among the 500 most highly COMT-correlated genes in Prefrontal Cortext, Temporal Cortex, or Pons.'),
                         caption.loc = c('top'),
                         booktabs=TRUE,
                         label=c('tab:genes.unique.cerebellum.pval.ranked'),
                         na.blank = TRUE,
                         rowlabel=c(''),
                         colheads=c(rep('',rows.for.tabs)),
                         vbar = FALSE,
                         longtable=TRUE,
                         continued=paste('Unique genes ',stand.Col.names[2],' continued',sep=''),
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=TRUE
                         )


# Temporal

temp.union12 <- union(hold.Lowest.pvals[[1]]$Symbol,hold.Lowest.pvals[[2]]$Symbol)
temp.union124 <- union(hold.Lowest.pvals[[4]]$Symbol,temp.union12)
temp.unique.3v124 <- setdiff(hold.Lowest.pvals[[3]]$Symbol,temp.union124)
temp.unique.temporal <- vect2mat(temp.unique.3v124,rows.for.tabs)
     colnames(temp.unique.temporal) <- c(rep('',rows.for.tabs))
     row.names(temp.unique.temporal) <- c(rep('',dim(temp.unique.temporal)[1]))

temp.unique.temporal.tab <- xtable(temp.unique.temporal,
                                     caption=c('The 209 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Temporal Cortex but not found among the 500 most highly COMT-correlated genes in Prefrontal Cortex, Cerebellum, or Pons.'))



unique.temporal.ltx <- latex(temp.unique.temporal.tab,file='area_unique_genes_pval_ranked.tex',
                   caption=paste('The 209 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Temporal Cortex but not found among the 500 most highly COMT-correlated genes in Prefrontal Cortext, Cerebellum, or Pons.'),
                         caption.loc = c('top'),
                         booktabs=TRUE,
                         label=c('tab:genes.unique.temporal.pval.ranked'),
                         na.blank = TRUE,
                         rowlabel=c(''),
                         colheads=c(rep('',rows.for.tabs)),
                         vbar = FALSE,
                         longtable=TRUE,
                         continued=paste('Unique genes ',stand.Col.names[2],' continued',sep=''),
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=TRUE
                         )

# Pons
temp.union12 <- union(hold.Lowest.pvals[[1]]$Symbol,hold.Lowest.pvals[[2]]$Symbol)
temp.union123 <- union(hold.Lowest.pvals[[3]]$Symbol,temp.union12)
temp.unique.4v123 <- setdiff(hold.Lowest.pvals[[4]]$Symbol,temp.union123)
temp.unique.pons <- vect2mat(temp.unique.4v123,rows.for.tabs)
     colnames(temp.unique.pons) <- c(rep('',rows.for.tabs))
     row.names(temp.unique.pons) <- c(rep('',dim(temp.unique.pons)[1]))

temp.unique.pons.tab <- xtable(temp.unique.pons,
                                     caption=c('The 235 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Pons but not found among the 500 most highly COMT-correlated genes in Prefrontal Cortex, Cerebellum, or Temporal Cortex.'))



unique.pons.ltx <- latex(temp.unique.pons.tab,file='area_unique_genes_pval_ranked.tex',
                   caption=paste('The 235 genes among the 500 most highly COMT-correlated genes (ranked by p-value) expressed in Pons but not found among the 500 most highly COMT-correlated genes in Prefrontal Cortext, Cerebellum, or Temporal Cortex.'),
                         caption.loc = c('top'),
                         booktabs=TRUE,
                         label=c('tab:genes.unique.pons.pval.ranked'),
                         na.blank = TRUE,
                         rowlabel=c(''),
                         colheads=c(rep('',rows.for.tabs)),
                         vbar = FALSE,
                         longtable=TRUE,
                         continued=paste('Unique genes ',stand.Col.names[2],' continued',sep=''),
                         table.env=TRUE,
                         center=c('center'),
                         first.hline.double = FALSE,
                         append=TRUE
                         )

num.unique.by.area <- data.frame(length(temp.unique.1v234),
                                 length(temp.unique.2v134),
                                 length(temp.unique.3v124),
                                 length(temp.unique.4v123)
                             )
colnames(num.unique.by.area) <- stand.Col.names

# Save all columns of the uniquely expressed genes in each area
     
unique.full.data.all <- list()

unique.symbols.only <- list(pf=temp.unique.1v234,
                            cb=temp.unique.2v134,
                            tm=temp.unique.3v124,
                            po=temp.unique.4v123)

for (im in ib)   {
     
     temp.match.unique <- match(unique.symbols.only[[im]],hold.Lowest.pvals[[im]]$Symbol)
     unique.full.data.all[[im]] <- hold.Lowest.pvals[[im]][c(temp.match.unique),]

}

# One-off write the full variable set of only the unique genes in each area to file

success.write.status <- write.general(unique.full.data.all[[1]],
                                      unique.full.data.all[[2]],
                                      unique.full.data.all[[3]],
                                      unique.full.data.all[[4]],
                                      'unique_prefrontal_full_data',
                                      'unique_cerebellum_full_data',
                                      'unique_temporal_full_data',
                                      'unique_pons_full_data')





@

The uniquely expressed genes within an area are most highly correlated with COMT expression but only in that area. As such, they should be related to the function of {\itshape {COMT}} {\bfseries {in that particular area}}. The next step will be to do ontology on these uniquely expressed genes in each area both without separating by the sign of the correlation, and with separating by sign.


\end{document}
