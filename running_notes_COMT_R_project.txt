Running notes on COMT project Started April 5, 2018

Use Option-Shift-T to run the timeStamp AppleScript, then Control V to paste in the time stamp.

April 5, 2018

It looks like there is no way to recover gene symbols for the remaining cases in which the symbol looks like 'LOCxxx'. I tried several approaches, and none of them returned anything but 'LOCxxx'


Thursday, April 5, 2018 at 4:46:59 PM
The table below shows that there were approximately 100 rows with NA for the loc variable (Chromosome name)
sapply(na.loc.indx[ib], function(x,ib) length(x), ib)

# rows that had NA under the Chr name variable loc
#  pf  cb  tm  po 
# 104  98 104 100

When ensembl is queried for these missing Chromosomes names it returns the numbers shown in the first column below.
The second column shows the number of those that were formatted as CHR_ which made them unusable, so I extracted the CHR name/number from them

#    total_returned CH_returned CH2NAleft
# pf            319          56         6
# cb            280          21         6
# tm            311          40         2
# po            292          35         4

After this step, only, 6, 6, 2 & 4 remain with CHR as the loc value. But this has not yet been integrated into the primary data files.
                            
# temp.Init holds the corrected Chromosome names to be used to replace the NAs in major.Area
# first need to match the ENTREZIDs of the NA loc against the extracted/returned Chr names in temp.Init


Friday, April 6, 2018 at 2:02:46 PM

<< recover_Chr_names>>=
There were 

# rows that had NA under the Chr name variable loc
#  pf  cb  tm  po 
# 104  98 104 100

When getBM was queried using Symbol and ENTREZID of the rows missing Chromosome names, the following statistics resulted:

#    total_returnedSymb CH_returnedSymb CH2NAleftSymb total_returnedEntrez CH_returnedEmntrez
# pf                319              56             6                  357                 59
# cb                280              21             6                  319                 27
# tm                311              40             2                  348                 51
# po                292              35             4                  340                 42
#    CH2NAleftEntrez
# pf               7
# cb               8
# tm               4
# po               5

In other words, after reformatting the Chromosome names that looked like CHR_xxx only approximate 6-7 of the ~320 returned results could not be reformatted into standard Chromosome values such as '2' or 'X'.

However, even though only approximately 100 NA entries were used in the query, getBM returned many more results ~300-320. This requires a matching between the missing NA Symbols and ENTREZIDs and the returned hgnc_gene and extrezgene values.


<< check_NA_reformatted_extracted_Chr_names >>=
                            
# temp.Init$symb and temp.Init$entrezg hold the corrected Chromosome names to be used to 
  #replace the NAs in major.Area
# first need to match the ENTREZIDs of the NA loc in major.Area against the extracted/returned    Chr names in na.loc.returned and na.loc.returned.entrez using Symbols and ENTREZID
# For example, there were

rows that had NA under the Chr name variable loc
  pf  cb  tm  po 
 104  98 104 100 

Once the existence of the potential Chr_names was checked against was checked against NAs in the temp.Init$symbol and temp.Init$entrezg files, the numbers in the table below show how many additional chromosome names were recovered using Symbol and ENTREZID getBM queries.

 add.Chr.names
           Symbol_query entrez_query
Prefrontal           21            7
Cerebellum           16            6
Temporal             19            7
Pons                 21            7

<< union_Symb_entrez_returns >>=
Need to get the union of these available Chr names before substituting them into major.Area and the primary data files

But creating the union loses the information about which of the two queries produced the Chromosome name to be used.

ˇSaturday, April 7, 2018 at 6:03:27 AM

Rewrote section before the union operation to create lists that for each brain area have the index of the match using Symbol/hgnc_gene, the returned symbol (hgnc_gene), the returned enter (entrezgene), the returned loc (chromosome_name) and the reformatted/extracted chromosomes name from temp.Init$symbol.

This was repeated for the getBM query that was based on entrezgene.

When this is done, the numbers of useable additional Chromosome names that result are shown in the table below.

> add.Chr.names
           Symbol_query entrez_query
Prefrontal           21            4
Cerebellum           16            3
Temporal             19            4
Pons                 21            4

Now, the union operation can be completed.

It looks like for union.found.Chr.indx that holds the union of the corresponding indices from the two types of getBM queries, the indices from the entrezgene query are always a subset of those from the hgnc_gene query.

This table, comp.union.intersect.tab, shows that the getBM query for chromosome names based on entrezgene values produced no additional chromosome names over and above the ones produced by the query based on gene symbols.

		No additional chromosome names?
Prefrontal 	TRUE 
Cerebellum 	TRUE 
Temporal 	TRUE 
Pons 		TRUE 

Now use the union vector  to replace the NA values in major.Area and in the primary data files.

After the recovered chromosome names were written to the major.Area files, the table below shows the number of missing chromosome names remaining.

> missing.loc
   Missing_Chr_names
pf                83
cb                82
tm                85
po                79

l 1320

Saturday, April 7, 2018 at 11:15:25 AM

added chunk << write_data_out >> to write out the primary data files after finding various missing values

l 1335

The chuck << find_miss_start_pos_bp >>= basically needs to repeat the procedure that was just completed for finding missing chromosome names

This section to find the missing start positions begins at line 1341 - do not replace anything above that with new variable names

<< check_NA_in_bp >>=                            

sapply(na.bp.indx[ib], function(x,ib) length(x), ib)

# rows that had NA under the Chr name variable loc
#  pf  cb  tm  po 
# 104  98 104 100

The table above shows the number of rows missing start positions in each brain area for trying to recover then using getBM.

From the two getBM queries the number of additional starting positions returned was

> add.start.Pos
           Symbol_query entrez_query
Prefrontal           18            2
Cerebellum           14            2
Temporal             16            2
Pons                 18            2

********** Do not forget to divide the returned starting positions by 1,000,000

> missing.bp
   Missing_start_Pos
pf                86
cb                85
tm                88
po                82

Saturday, April 7, 2018 at 3:42:32 PM

BLAST test using probe sequence for COMT
AGCCAGAGGGCTGGAGCCTGCTCAGAGGTGCTTTGAAGATGCCGGAGGCC

Monday, April 9, 2018 at 8:59:35 AM

This chunk << alternative_blast >>=
produces a data frame (after many transformations) of the form:

            id gi.Access     ref.Access percent.Match qlen length mismatch gaps taxon.Code   evalue	bitscore
1 id_440589_pf 136724010 XR_001712422.2       100.000   50     50        0    0       9598 2.57e-16	93.5

This comes from querying the blastn server using the probe Reporter.Sequence of all of the rows that have missing Chromosomes.

It next needs to be subset by the taxon.Code=9606 (Homo sapiens).

After this, only the top hit for each unique id should be retained. NOTICE that the top hit once the data have been subset by 9606 is not necessarily the top overall hit for that id. It is, on the other hand, the top hit for Homo sapiens of that probe sequence.

NOTE: blastn was queried with 83 sequences, but the results returned by blastn for pf for example only contain 80 unique ids.
*** Will need to match the IDs to the ENTREZIDs of the 83 rows missing Chromosome names that were used in the query.

In the chunk << subset_9606 >>= the variable pos.inc holds the row number of the first hit for each unique ENTREZID in the order in which they appear in the blast.out.pf9606

first.hits holds only the first hits for homo sapiens for unique ENTREZIDs

The second ACCESSION number can then be used with rentrez_search to find the Chromosome name, gene name, and start location.

Monday, April 9, 2018 at 2:24:19 PM

Documentation for querying the enter gene database
ˇhttps://cran.r-project.org/web/packages/rentrez/vignettes/rentrez_tutorial.html

<< match_new_Chr_names >>=
 The ENTREZIDs with missing chromosomes need to be matched against the newly found chromosomes from renters

*************************************
Tuesday, April 10, 2018 at 7:37:46 AM

When the results returned from the rentrez search were matched using entrezgene (uid) to the ENTREZIDs from the rows missing Chromosome names, there were only approximately 2-3 matches out of 83 ENTREZIDs from rows missing Chromosomes. Something is wrong, so the next step is to discover why rentrez returned so many hits, but so few of them could be used to reduce the number of rows with missing Chr names.

<< get_illumina_entrezid_symbol >>=

Retrieve the entrezgenes and symbols from the illumination file based on probes whose search key matched the .Record value from the major.Area lists.

When the ENTREZIDs from major.Area of the rows missing Chromosome (loc) names are compared to the entrez values from the illumina file matched through ILMN_xxx values, the two sets of entrezgene IDs are identical.

> setdiff(as.character(unlist(entrez.and.symb.Illum[[1]][1])),as.character(major.Area[[1]]$ENTREZID[unlist(miss.Chr[[1]])]))
character(0)

> setdiff(as.character(unlist(entrez.and.symb.Illum[[1]][2])),as.character(major.Area[[2]]$ENTREZID[unlist(miss.Chr[[2]])]))
character(0)

> setdiff(as.character(unlist(entrez.and.symb.Illum[[1]][3])),as.character(major.Area[[3]]$ENTREZID[unlist(miss.Chr[[3]])]))
character(0)

> setdiff(as.character(unlist(entrez.and.symb.Illum[[1]][4])),as.character(major.Area[[4]]$ENTREZID[unlist(miss.Chr[[4]])]))
character(0)


COMT 1312 Reported.Sequence AGCCAGAGGGCTGGAGCCTGCTCAGAGGTGCTTTGAAGATGCCGGAGGCC

Do not use the ACCESSION numbers found using BLASTN with the probe Reporter.Sequence(s) because the first hit for homo sapiens gives too few ENTREZID/uid matches to be useful.

Instead, use the Symbols of the missing loc rows to retrieve chromosome names and start positions using rentrez.


This chunk << replace_missing_Chr_names >>= uses the chromosome names, and start positions recovered using rentrez to replace some of the missing loc values in major.Area[[1]] and in prefrontal.Data.

Need to repeat this analysis for the other three brain areas to find missing loc (Chromosome names) then repeat it for all four areas to retrieve missing start positions (bp).

Tuesday, April 10, 2018 at 3:44:47 PM

Consider running a principle components analysis of the correlations with COMT. The genes that load most highly on there first several components could be another way of determining the set to use for ontology analysis.

Wednesday, April 11, 2018 at 9:02:34 AM

At the end of the first rentrez run using major.Area[[1]], for the symbol C12orf63 rentrez returned uids 
[1] "144535"    "100490177" "417921"    "105097493" "105075061" "104963968" "104569553" "104513791"
 [9] "104491721" "104482013" "104370438" "104360091" "104254646" "104164853" "104143861" "104072519"
[17] "104041059" "104029002" "103811347" "104696434"

None of these match the ENTREZID for that Symbol in major.Area[[1]]: 374467

However, when you look up 374467 in the gene database, it shows that that ENTREZID was replaced with 144535 which is the first aid returned in the rentrez search.  Additionally, searching gene cards with thew symbol gives the chromosome and start position. It also gives the correct symbol, CFAP54. By hand I replaced the results for row 31 in rentrez.results[[1]] with the correct information.






